/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Patient;

import Business.Doctor.Appointment;
import Business.Doctor.Doctor;
import Business.Doctor.DoctorDepartment;
import Business.EcoSystem;
import Business.EnterPrise.Enterprise;
import Business.EnterPrise.EnterpriseDirectory;
import Business.EnterPrise.HospitalEnterprise;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Patient.PatientDirectory;
import Business.Person.Person;
import Business.Role.PatientRole;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samarth
 */
public class PatientViewAndTakeAppointment extends javax.swing.JPanel {

    /**
     * Creates new form PatientWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem ecoSystem;
    private Person person;
    private Enterprise enterprise;
    private Patient patient;
    private UserAccount userAccount;
    
    public PatientViewAndTakeAppointment(JPanel userProcessContainer,UserAccount ua, Enterprise ep, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = system;
        this.person = person;
        this.enterprise=ep;
        this.patient=ua.getPatient();
        userAccount=ua;
        //populateHospitals(); not required
        System.out.println("enter====" + enterprise.getOrgName());
        populateDoctorDepartmentComboBox(enterprise);
        generatePatientAppoinmentHistory();
    }

   public void generatePatientAppoinmentHistory()
   {    
    DefaultTableModel dtm = (DefaultTableModel) patientAppointmentHistory.getModel();
     dtm.setNumRows(0);
       System.out.println("patient.getAppointmentDirectory().getAppointmentList()-->"+patient.getAppointmentDirectory().getAppointmentList().size());
    for(Appointment appointment:patient.getAppointmentDirectory().getAppointmentList())
    {
        Object[] row = new Object[6];
            row[0] = appointment;
            //Doctor doctor=appointment.getDoctor();
            System.out.println("apppont-->"+appointment);
            row[1] = appointment.getDoctor().getFirstName()+" "+appointment.getDoctor().getLastName();
            row[2] = appointment.getDoctor().getDocEducation();
            row[3] = appointment.getTimeSlot();
            row[4] = appointment.getAppointmentStatus();
            
            dtm.addRow(row);
    }
   }
    
    // not required.
    /*
     private void populateHospitals() {
     hospitalComboBox.removeAllItems();

     for (Network network : ecoSystem.getNetworkList().getNetworkList()) {
     for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterPriseList()) {
     hospitalComboBox.addItem(enterprise);
     }

     }
     }
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        docAppoinmentDetails = new javax.swing.JTable();
        docDepartmentcomBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        doctorNameTable = new javax.swing.JTable();
        selectDateforAppointMent = new org.jdesktop.swingx.JXDatePicker();
        backJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        patientAppointmentHistory = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        docAppoinmentDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Time Slot", "Appointment Status", "Patient Name"
            }
        ));
        jScrollPane1.setViewportView(docAppoinmentDetails);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 462, 790, 88));

        docDepartmentcomBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        docDepartmentcomBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docDepartmentcomBoxActionPerformed(evt);
            }
        });
        add(docDepartmentcomBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 90, 173, 35));

        jLabel2.setText("Select Department:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, -1, -1));

        jLabel3.setText("Select Doctor:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 179, -1, -1));

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 570, 100, 35));

        doctorNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Doctor First Nam", "Last Name", "Specialties"
            }
        ));
        jScrollPane2.setViewportView(doctorNameTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, 780, 90));

        selectDateforAppointMent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDateforAppointMentActionPerformed(evt);
            }
        });
        add(selectDateforAppointMent, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 360, 200, 35));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 630, -1, 35));

        patientAppointmentHistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Date", "Doctor Name", "Doctor Speciality", "Time Slot", "Status"
            }
        ));
        jScrollPane3.setViewportView(patientAppointmentHistory);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 180, 640, 100));

        jButton2.setText("Cancel Appointment");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 335, -1, 35));

        jButton3.setText("Chat");
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 520, 140, 35));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Note:- Click here to begin Chat, ");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 560, 370, 20));

        jLabel4.setText("please use same user name and password that you have used for login.");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 580, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void docDepartmentcomBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docDepartmentcomBoxActionPerformed
        DoctorDepartment doctorDepartment = (DoctorDepartment) docDepartmentcomBox.getSelectedItem();
        if (doctorDepartment != null) {
            populateDoctorList(doctorDepartment);
        }
    }//GEN-LAST:event_docDepartmentcomBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = docAppoinmentDetails.getSelectedRow();
        if (selectedRow >= 0) {
            Appointment appoinment = (Appointment) docAppoinmentDetails.getValueAt(selectedRow, 0);

            if (!appoinment.getAppointmentStatus().getValue().equals("Open")) {
                System.out.println("===inside if=====");
                JOptionPane.showMessageDialog(null, "Appointment Status is not open");
                return;
            }
            //if(appoinment.getDate())
            
            appoinment.setAppointmentStatus(Appointment.AppointmentStatus.Booked);
           // UserAccount userAccount = createUserAccount(person);
            //Patient patient=addandCreatePatient(person);
            appoinment.setPatient(userAccount.getPatient());
 
            Appointment appoinment1= new Appointment();
            appoinment1.setAppoinmentID(appoinment.getAppoinmentID());
            appoinment1.setAppointmentStatus(Appointment.AppointmentStatus.Booked);
            appoinment1.setDate(appoinment.getDate());
            appoinment1.setTimeSlot(appoinment.getTimeSlot());
            appoinment1.setDoctor(appoinment.getDoctor());
            appoinment1.setPatient(patient);
            patient.getAppointmentDirectory().addAppointment(appoinment);
            generatePatientAppoinmentHistory();
            
        } else {
            JOptionPane.showMessageDialog(null, "Please select row first");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void selectDateforAppointMentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDateforAppointMentActionPerformed
        int selectedRow = doctorNameTable.getSelectedRow();

        if (selectedRow >= 0) {
            Doctor doctor = (Doctor) doctorNameTable.getValueAt(selectedRow, 0);

            DefaultTableModel dtm = (DefaultTableModel) docAppoinmentDetails.getModel();

            Date date = selectDateforAppointMent.getDate();
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/YYYY");
            String appmentDate = sdf.format(date);
            if (!(appmentDate.equals(""))) {
                dtm.setNumRows(0);
                for (Appointment appointment : doctor.getAppointmentList().getAppointmentList()) {
                    if (appointment.getDate().equals(appmentDate)) {
                        Object[] row = new Object[4];
                        row[0] = appointment;
                        row[1] = appointment.getTimeSlot();
                        row[2] = appointment.getAppointmentStatus();
                        row[3] = appointment.getPatient();
                        dtm.addRow(row);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select the Date for appointment");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select row Doctor Name");
        }
    }//GEN-LAST:event_selectDateforAppointMentActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        int selectedRow = patientAppointmentHistory.getSelectedRow();

        if (selectedRow >= 0) {
            Appointment appointment = (Appointment) patientAppointmentHistory.getValueAt(selectedRow, 0);
            if(appointment.getAppointmentStatus().getValue().equals("Booked"))
            {
                  appointment.setAppointmentStatus(Appointment.AppointmentStatus.Open);
                  appointment.setPatient(null);
                  patient.getAppointmentDirectory().getAppointmentList().remove(appointment);
                  Appointment appointment1= new Appointment();
                  appointment1.setDoctor(appointment.getDoctor());
                  appointment1.setAppoinmentID(appointment.getAppoinmentID());
                  appointment1.setDate(appointment.getDate());
                  appointment1.setTimeSlot(appointment.getTimeSlot());
                  appointment1.setPatient(patient);
                  appointment1.setAppointmentStatus(Appointment.AppointmentStatus.Canceled);
                  patient.getAppointmentDirectory().getAppointmentList().add(appointment1);
               generatePatientAppoinmentHistory();
            }
            else
            {
              JOptionPane.showMessageDialog(null, "Appointment status is not Booked");  
            }
            
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please select row first");
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    public UserAccount createUserAccount(Person person) {
        UserAccount userAccount = new UserAccount();
        Patient patient = new Patient();
        patient.setFirstName(person.getFirstName());
        patient.setLastName(person.getLastName());
        patient.setEmailID(person.getEmailID());
        patient.setDob(person.getDob());
        patient.setUsername(person.getUsername());
        patient.setPassword(person.getPassword());
        patient.setPersonID(person.getPersonID());
        userAccount.setPatient(patient);
        userAccount.setPassword(person.getPassword());
        userAccount.setUsername(person.getUsername());
        userAccount.setRole(new PatientRole());
        if (enterprise instanceof HospitalEnterprise) {
            HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) enterprise;
            PatientDirectory pd = hospitalEnterprise.getPatientDirectory();
            pd.addpatPatient(patient);
            UserAccountDirectory uad = hospitalEnterprise.getUserAccountDirectory();
            uad.addUserAccount(userAccount);
        }
        return userAccount;

    }

    public Patient addandCreatePatient(Person person) {
        Patient patient = new Patient();
        patient.setFirstName(person.getFirstName());
        patient.setLastName(person.getLastName());
        patient.setEmailID(person.getEmailID());
        patient.setDob(person.getDob());
        patient.setUsername(person.getUsername());
        patient.setPassword(person.getPassword());
        patient.setPersonID(person.getPersonID());
        if (enterprise instanceof HospitalEnterprise) {
            HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) enterprise;
            PatientDirectory pd = hospitalEnterprise.getPatientDirectory();
            pd.addpatPatient(patient);
        }
        return patient;
    }

    public void populateDoctorList(DoctorDepartment doctorDepartment) {
        DefaultTableModel model = (DefaultTableModel) doctorNameTable.getModel();
        model.setRowCount(0);
        for (Doctor doctor : doctorDepartment.getDoctorDirectory().getDoctorList()) {
            Object row[] = new Object[4];
            row[0] = doctor;
            row[1] = doctor.getLastName();
            row[2] = doctor.getDocEducation();
            model.addRow(row);
        }
    }

    public void populateDoctorDepartmentComboBox(Enterprise enterprise) {

        docDepartmentcomBox.removeAllItems();
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof DoctorOrganization) {
                DoctorOrganization doctorOrganization = (DoctorOrganization) organization;
                for (DoctorDepartment doctorDepartment : doctorOrganization.getDoctorDepartmentCatalog().getDoctorDepartmentCatalog()) {
                    docDepartmentcomBox.addItem(doctorDepartment);
                }

            }
        }
    }

    public void populateDoctoromboBox(DoctorDepartment doctorDepartment) {

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable docAppoinmentDetails;
    private javax.swing.JComboBox docDepartmentcomBox;
    private javax.swing.JTable doctorNameTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable patientAppointmentHistory;
    private org.jdesktop.swingx.JXDatePicker selectDateforAppointMent;
    // End of variables declaration//GEN-END:variables
}
