/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Patient;

import Business.EcoSystem;
import Business.EnterPrise.AmbulanceEnterprise;
import Business.EnterPrise.Enterprise;
import Business.Network.Network;
import Business.Organization.AmbulanceReceptionistOrganization;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.PatientVisit.VitalSign;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.VitalAlertRequestToAmbulanceReception;
import Business.WorkQueue.VitalAlertTestRequestToNurse;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.SystemColor;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author samar
 */
public class PatientViewAndAddVitalSignJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PatientViewAndAddVitalSignJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private Organization organization;
    private EcoSystem ecoSystem;
    private Patient patient;
    private VitalSign vitalSign;
    private Network network;
    private int personyears;

    public PatientViewAndAddVitalSignJPanel(JPanel upc, UserAccount userAccount, Organization org, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        patient = userAccount.getPatient();
        userProcessContainer = upc;
        this.userAccount = userAccount;
        this.organization = org;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        patient = userAccount.getPatient();
        populatePatientVitalSignTable();
        System.out.println("  Patient MRN no-->" + patient.getMrn());

    }

    public void calculateAge() {
        try {
            String dobString = patient.getDob();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");

            Date birthDateChange = simpleDateFormat.parse(dobString);
            System.out.println("birthDateChange--->" + birthDateChange);
            Calendar birthDay = Calendar.getInstance();
            birthDay.setTimeInMillis(birthDateChange.getTime());

            long currentTime = System.currentTimeMillis();
            Calendar now = Calendar.getInstance();
            now.setTimeInMillis(currentTime);
            personyears = now.get(Calendar.YEAR) - birthDay.get(Calendar.YEAR);

        } catch (ParseException exp) {
            System.out.println("====parse exception");
        }
    }

    public void populatePatientVitalSignTable() {
        DefaultTableModel model = (DefaultTableModel) vitalSignTable.getModel();
        model.setRowCount(0);
        for (VitalSign vitalSign : patient.getVitalList().getVitalList()) {

            Object[] row = new Object[5];
            row[0] = vitalSign;
            row[1] = vitalSign.getRespiratoryRate();
            row[2] = vitalSign.getHeartRate();
            row[3] = vitalSign.getBloodPressure();
            row[4] = vitalSign.getWeight();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        vitalSignTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        respRateTxt = new javax.swing.JTextField();
        heartRateTxt = new javax.swing.JTextField();
        sysBloodPresTxt = new javax.swing.JTextField();
        weightInPoundsTxt = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        backJButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        viewBtn = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        locationLongTxt = new javax.swing.JTextField();
        locationLatiTxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        respRateTxt1 = new javax.swing.JTextField();
        heartRateTxt1 = new javax.swing.JTextField();
        sysBloodPresTxt1 = new javax.swing.JTextField();
        weightInPoundsTxt1 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        locationLongTxt1 = new javax.swing.JTextField();
        locationLatiTxt1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        vitalSignTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Captured Date", "Respiratory Rate", "Heart Rate", "Sysmbolic Blood Pressure", "Pounds"
            }
        ));
        jScrollPane1.setViewportView(vitalSignTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(566, 60, 750, 200));

        jLabel2.setText("Respiratory Rate:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 280, -1, -1));

        jLabel3.setText("Heart Rate:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 320, -1, -1));

        jLabel4.setText("Systolic blood Pressure:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 370, -1, -1));

        jLabel5.setText("Weight in Pounds:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 420, -1, -1));

        respRateTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respRateTxtActionPerformed(evt);
            }
        });
        add(respRateTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 270, 120, 35));

        heartRateTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heartRateTxtActionPerformed(evt);
            }
        });
        add(heartRateTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 320, 120, 37));
        add(sysBloodPresTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 370, 120, 37));
        add(weightInPoundsTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 420, 120, 35));

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        add(saveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 610, 100, 35));

        backJButton1.setText("<< Back");
        backJButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton1ActionPerformed(evt);
            }
        });
        add(backJButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 730, 101, 35));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Add and View Vital Sign");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 10, -1, -1));

        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });
        add(viewBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 610, 100, 35));

        jLabel14.setText("location latitude:");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 490, -1, -1));

        jLabel15.setText("Location longitude:");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 540, -1, -1));
        add(locationLongTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 540, 120, 35));
        add(locationLatiTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 480, 120, 35));

        jLabel6.setText("Respiratory Rate:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 280, -1, -1));

        jLabel7.setText("Heart Rate:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 320, -1, -1));

        jLabel8.setText("Systolic blood Pressure:");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 370, -1, -1));

        jLabel9.setText("Weight in Pounds:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 420, -1, -1));

        respRateTxt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respRateTxt1ActionPerformed(evt);
            }
        });
        add(respRateTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 270, 120, 35));

        heartRateTxt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heartRateTxt1ActionPerformed(evt);
            }
        });
        add(heartRateTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 320, 120, 37));
        add(sysBloodPresTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 370, 120, 37));
        add(weightInPoundsTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 420, 120, 35));

        jLabel16.setText("location latitude:");
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 490, -1, -1));

        jLabel17.setText("Location longitude:");
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 540, -1, -1));
        add(locationLongTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 540, 120, 35));
        add(locationLatiTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1180, 480, 120, 35));

        jButton1.setText("Respiratory Graph");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 690, 180, 35));

        jButton2.setText("Heart Rate");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 690, -1, 35));

        jButton3.setText("BlodPressure Graph");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 690, -1, 35));

        jButton4.setText("Weight Graph");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 690, -1, 35));
    }// </editor-fold>//GEN-END:initComponents

    private void respRateTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respRateTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_respRateTxtActionPerformed

    public boolean checkUserInputValue(String respiratory, String heartRate, String strSysBloodPree, String strWeightInPounds, String latitude, String longitude) {
        String validationerror = "Please correct the following error:";

        System.out.println("--- inside the checkusrInputValidation======");

        // validation for respiratory
        if (respiratory.trim().equals("")) {
            validationerror = validationerror + "\n" + "Please enter the Respiratory Rate";
        }
        if (!(respiratory.trim()).equals("") && !(respiratory.trim()).equals("null")
                && !((respiratory.trim()).matches("[0-9]*"))) {
            validationerror = validationerror + "\n" + "Respiratory Rate should "
                    + "contain Number only";
        }
        if (!(respiratory.equals("")) && ((respiratory.toString().trim()).matches("[0-9]*"))) {
            Float floatrespiratory = Float.parseFloat(respRateTxt.getText());
            if ((!((floatrespiratory >= 5) && (floatrespiratory <= 60)))) {
                validationerror = validationerror + "\n" + "Respiratory Rate can not be  "
                        + "less than 5 and greater than 60";
            }

        }

        // validation for heartRate
        if (heartRate.trim().equals("")) {
            validationerror = validationerror + "\n" + "Please enter the heart Rate";
        }
        if (!(heartRate.trim()).equals("") && !(heartRate.trim()).equals("null")
                && !((heartRate.trim()).matches("[0-9]*"))) {
            validationerror = validationerror + "\n" + "Heart Rate should "
                    + "contain Number only";
        }
        if (!(heartRate.equals("")) && ((heartRate.toString().trim()).matches("[0-9]*"))) {
            Float floatheartRate = Float.parseFloat(heartRateTxt.getText());
            if ((!((floatheartRate >= 30) && (floatheartRate <= 300)))) {
                validationerror = validationerror + "\n" + "Heart Rate can not be  "
                        + "less than 30 and greater than 300";
            }

        }

        // validation for strSysBloodPree
        if (strSysBloodPree.trim().equals("")) {
            validationerror = validationerror + "\n" + "Please enter the Blood pressure Rate";
        }
        if (!(strSysBloodPree.trim()).equals("") && !(strSysBloodPree.trim()).equals("null")
                && !((strSysBloodPree.trim()).matches("[0-9]*"))) {
            validationerror = validationerror + "\n" + "Blood pressure should "
                    + "contain Number only";
        }
        if (!(strSysBloodPree.equals("")) && ((strSysBloodPree.toString().trim()).matches("[0-9]*"))) {
            Float floatSysBloodPree = Float.parseFloat(sysBloodPresTxt.getText());
            if ((!((floatSysBloodPree > 40) && (floatSysBloodPree < 400)))) {
                validationerror = validationerror + "\n" + "Blood pressure can not be  "
                        + "less than 40 and greater than 400";
            }

        }

        // validation for strWeightInPounds
        if (strWeightInPounds.trim().equals("")) {
            validationerror = validationerror + "\n" + "Please enter the weight Rate";
        }
        if (!(strWeightInPounds.trim()).equals("") && !(strWeightInPounds.trim()).equals("null")
                && !((strWeightInPounds.trim()).matches("[0-9]*"))) {
            validationerror = validationerror + "\n" + "weight should "
                    + "contain Number only";
        }
        if (!(strWeightInPounds.equals("")) && ((strWeightInPounds.toString().trim()).matches("[0-9]*"))) {
            Float floatWeightInPounds = Float.parseFloat(weightInPoundsTxt.getText());
            if ((!((floatWeightInPounds >= 15) && (floatWeightInPounds <= 250)))) {
                validationerror = validationerror + "\n" + "Weight can not be  "
                        + "less than 15 and greater than 250";
            }

        }

        //validation for latitude
        if ((latitude.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the latitude";
        }
        if ((!(latitude.trim()).equals("")) && (!(latitude.trim().length() < 25))) {
            validationerror = validationerror + "\n" + "latitude value can not be more than 25, please enter valid number";
        }

        //validation for longitude
        if ((longitude.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the longitude";
        }
        if ((!(longitude.trim()).equals("")) && (!(longitude.trim().length() < 25))) {
            validationerror = validationerror + "\n" + "longitude value can not be more than 25, please enter valid number";
        }

        if (validationerror.equals("Please correct the following error:")) {
            validationerror = "Thanks for details";
            //JOptionPane.showMessageDialog(null, validationerror);
            return true;
        } else {
            JOptionPane.showMessageDialog(null, validationerror);
            return false;
        }

    }


    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed

        boolean isUserInputValid = checkUserInputValue(respRateTxt.getText(), heartRateTxt.getText(), sysBloodPresTxt.getText(), weightInPoundsTxt.getText(), locationLatiTxt.getText(), locationLongTxt.getText());

        if (isUserInputValid) {
            float respiratory = Float.parseFloat(respRateTxt.getText());
            float heartRate = Float.parseFloat(heartRateTxt.getText());
            float strSysBloodPree = Float.parseFloat(sysBloodPresTxt.getText());
            float strWeightInPounds = Float.parseFloat(weightInPoundsTxt.getText());
            Double latitude = Double.parseDouble(locationLatiTxt.getText());
            Double longitude = Double.parseDouble(locationLongTxt.getText());

            vitalSign = new VitalSign();

            vitalSign.setBloodPressure(strSysBloodPree);
            vitalSign.setHeartRate(heartRate);
            vitalSign.setRespiratoryRate(respiratory);
            vitalSign.setWeight(strWeightInPounds);
            vitalSign.setLatitude(latitude);
            vitalSign.setLongitude(longitude);

            Date date = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/YYYY HH:mm:ss");
            String currDate = sdf.format(date);

            vitalSign.setVitalCapDate(currDate);
            patient.getVitalList().addVitalSign(vitalSign);

            populatePatientVitalSignTable();
            clearText();

            // check vital Sign value for generateAlertRequestToNurse
            boolean isAbNormal = ((respiratory > 30 && respiratory < 40) || (respiratory < 12))
                    || ((heartRate > 130 && heartRate < 160) || (heartRate < 55))
                    || ((strSysBloodPree < 80) || (strSysBloodPree > 120 && strSysBloodPree < 150))
                    || ((strWeightInPounds < 22) || ((strWeightInPounds > 110) && (strWeightInPounds < 150)));
            if (isAbNormal) {
                generateAlertRequestToNurse();
            }

            // // check vital Sign value for upper level only.
            boolean isCritical = ((respiratory >= 40) || (heartRate >= 160) || (strSysBloodPree >= 150));
            if (isCritical) {
                generateAlterRequestDirectToAmbulanceReception();
                System.out.println("=========generateAlterRequestDirectToAmbulanceReception=========");
            }
        }

    }//GEN-LAST:event_saveBtnActionPerformed

    public void clearText() {
        respRateTxt.setText("");
        heartRateTxt.setText("");
        weightInPoundsTxt.setText("");
        sysBloodPresTxt.setText("");
        locationLatiTxt.setText("");
        locationLongTxt.setText("");
    }

    public void generateAlterRequestDirectToAmbulanceReception() {
        VitalAlertRequestToAmbulanceReception vARTAR = new VitalAlertRequestToAmbulanceReception();
        vARTAR.setSender(patient);
        Date todayDate = new Date();
        vARTAR.setRequestDate(todayDate);
        vARTAR.setMessage("Critical");
        vARTAR.setVitalSign(vitalSign);
        vARTAR.setStatus("Sent to Ambulance Receptionist");
        Organization org = null;
        Organization orgNurse = null;
        System.out.println("=== above for condi on ==99999");

        for (Network tempNetwork : ecoSystem.getNetworkList().getNetworkList()) {
            for (Enterprise checkEnterprise : tempNetwork.getEnterpriseDirectory().getEnterPriseList()) {
                if (checkEnterprise.getOrgName().equals(enterprise.getOrgName())) {
                    network = tempNetwork;
                    System.out.println("enterprise name-->" + checkEnterprise.getOrgName());
                }
            }
        }

        System.out.println("network name-->" + network.getName());
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterPriseList()) {
            if (enterprise instanceof AmbulanceEnterprise) {
                System.out.println("enterprise name==>" + enterprise.getOrgName());
                for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof AmbulanceReceptionistOrganization) {
                        org = organization;
                        System.out.println("organization name-->" + organization.getOrgName());
                    }
                }

            }
        }

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            System.out.println("=== above for condi on ==88" + organization.getOrgName());
            if (organization instanceof NurseOrganization) {
                orgNurse = organization;
                System.out.println("--- in side the generateVisitPaymentRequest222222 ------------ ");
            }
        }
        if (orgNurse != null) {
            System.out.println("--- in side the generateVisitPaymentRequest3333 ------------ ");
            orgNurse.getWorkQueue().getWorkRequestList().add(vARTAR);
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(vARTAR);
        }
    }

    public void generateAlertRequestToNurse() {
        VitalAlertTestRequestToNurse vitalAlertTestRequestToNurse = new VitalAlertTestRequestToNurse();
        System.out.println("==patient MRN No===2nd " + patient.getMrn());
        // Person p = (Person) patient;
        vitalAlertTestRequestToNurse.setSender(patient);
        Date todayDate = new Date();
        vitalAlertTestRequestToNurse.setRequestDate(todayDate);
        vitalAlertTestRequestToNurse.setMessage("Vital Abnormal");
        vitalAlertTestRequestToNurse.setVitalSign(vitalSign);
        vitalAlertTestRequestToNurse.setStatus("Sent to Nurse");
        Organization org = null;

        System.out.println("--- in side the generateVisitPaymentRequest ------------ ");
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof NurseOrganization) {
                org = organization;
                System.out.println("--- in side the generateVisitPaymentRequest222222 ------------ ");
                break;

            }
        }
        if (org != null) {
            System.out.println("--- in side the generateVisitPaymentRequest3333 ------------ ");
            org.getWorkQueue().getWorkRequestList().add(vitalAlertTestRequestToNurse);
            //userAccount.getWorkQueue().getWorkRequestList().add(cVCWR);
        }

    }

    private void backJButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton1ActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton1ActionPerformed

    private void heartRateTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heartRateTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heartRateTxtActionPerformed

    private void respRateTxt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respRateTxt1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_respRateTxt1ActionPerformed

    private void heartRateTxt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heartRateTxt1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heartRateTxt1ActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        int selectedRow = vitalSignTable.getSelectedRow();
        if (selectedRow >= 0) {
            VitalSign vitalSign = (VitalSign) vitalSignTable.getValueAt(selectedRow, 0);

            // function to calulate age
            int years = 0;
            try {
                String dobString = patient.getDob();
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");

                Date birthDateChange = simpleDateFormat.parse(dobString);
                System.out.println("birthDateChange--->" + birthDateChange);
                Calendar birthDay = Calendar.getInstance();
                birthDay.setTimeInMillis(birthDateChange.getTime());

                long currentTime = System.currentTimeMillis();
                Calendar now = Calendar.getInstance();
                now.setTimeInMillis(currentTime);
                years = now.get(Calendar.YEAR) - birthDay.get(Calendar.YEAR);

            } catch (ParseException exp) {
                System.out.println("in catch section");
            }
            // for respRateTxt1
            if (((years >= 1 && years <= 3) && ((vitalSign.getRespiratoryRate() >= 20) && (vitalSign.getRespiratoryRate() <= 30)))
                    || ((years == 4 || years == 5) && ((vitalSign.getRespiratoryRate() >= 20) && (vitalSign.getRespiratoryRate() <= 30)))
                    || ((years >= 6 && years <= 12) && ((vitalSign.getRespiratoryRate() >= 20) && (vitalSign.getRespiratoryRate() <= 30)))
                    || ((years >= 13) && ((vitalSign.getRespiratoryRate() >= 12) && (vitalSign.getRespiratoryRate() <= 20)))) {
                System.out.println("inside color condition" + vitalSign.getRespiratoryRate());
                Color color = Color.GREEN;
                respRateTxt1.setBackground(color);
            } else {
                Color color = Color.RED;
                respRateTxt1.setBackground(color);
            }
            //Color code for Heart_rate
            if (((years >= 1 && years <= 3) && ((vitalSign.getHeartRate() >= 80) && (vitalSign.getHeartRate() <= 130)))
                    || ((years == 4 || years == 5) && ((vitalSign.getHeartRate() >= 80) && (vitalSign.getHeartRate() <= 120)))
                    || ((years >= 6 && years <= 12) && ((vitalSign.getHeartRate() >= 70) && (vitalSign.getHeartRate() <= 110)))
                    || ((years >= 13) && ((vitalSign.getHeartRate() >= 55) && (vitalSign.getHeartRate() <= 105)))) {
                System.out.println("inside color condition" + vitalSign.getHeartRate());
                Color color = Color.GREEN;
                heartRateTxt1.setBackground(color);
            } else {
                Color color = Color.RED;
                heartRateTxt1.setBackground(color);
            }

            // color code for Blood pressure
            if (((years >= 1 && years <= 3) && ((vitalSign.getBloodPressure() >= 80) && (vitalSign.getBloodPressure() <= 110)))
                    || ((years == 4 || years == 5) && ((vitalSign.getBloodPressure() >= 80) && (vitalSign.getBloodPressure() <= 110)))
                    || ((years >= 6 && years <= 12) && ((vitalSign.getBloodPressure() >= 70) && (vitalSign.getBloodPressure() <= 120)))
                    || ((years >= 13) && ((vitalSign.getBloodPressure() >= 110) && (vitalSign.getBloodPressure() <= 120)))) {
                Color color = Color.GREEN;
                sysBloodPresTxt1.setBackground(color);
            } else {
                Color color = Color.RED;
                sysBloodPresTxt1.setBackground(color);
            }
            //color code for pounds
            if (((years >= 1 && years <= 3) && ((vitalSign.getWeight() >= 22) && (vitalSign.getWeight() <= 31)))
                    || ((years == 4 || years == 5) && ((vitalSign.getWeight() >= 31) && (vitalSign.getWeight() <= 40)))
                    || ((years >= 6 && years <= 12) && ((vitalSign.getWeight() >= 41) && (vitalSign.getWeight() <= 92)))
                    || ((years >= 13) && (vitalSign.getWeight() >= 110))) {
                System.out.println("inside color condition" + vitalSign.getWeight());
                Color color = Color.GREEN;
                weightInPoundsTxt1.setBackground(color);
            } else {
                Color color = Color.RED;
                weightInPoundsTxt1.setBackground(color);
            }

            respRateTxt1.setText(String.valueOf(vitalSign.getRespiratoryRate()));
            heartRateTxt1.setText(String.valueOf(vitalSign.getHeartRate()));
            sysBloodPresTxt1.setText(String.valueOf(vitalSign.getBloodPressure()));
            weightInPoundsTxt1.setText(String.valueOf(vitalSign.getWeight()));
            locationLatiTxt1.setText(String.valueOf(vitalSign.getLatitude()));
            locationLongTxt1.setText(String.valueOf(vitalSign.getLongitude()));
        } else {
            JOptionPane.showMessageDialog(null, "Please select the request first");
        }
    }//GEN-LAST:event_viewBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        DefaultCategoryDataset barchart = new DefaultCategoryDataset();

        for (VitalSign vs : patient.getVitalList().getVitalList()) {
            System.out.println("((personyears >= 1 && personyears <= 3) && ((vitalSign.getRespiratoryRate() >= 20) && (vitalSign.getRespiratoryRate() <= 30))"
                    + ((personyears >= 1 && personyears <= 3) && ((vs.getRespiratoryRate() >= 20) && (vs.getRespiratoryRate() <= 30))));
            System.out.println("2nd==>" + ((personyears == 4 || personyears == 5) && ((vs.getRespiratoryRate() >= 20) && (vs.getRespiratoryRate() <= 30))));

            System.out.println("personyears-->" + personyears);
            System.out.println("vitalSign.getRespiratoryRate()-->" + vs.getRespiratoryRate());

            System.out.println("3rd -->" + ((personyears >= 6 && personyears <= 12) && ((vs.getRespiratoryRate() >= 20) && (vs.getRespiratoryRate() <= 30))));
            System.out.println("4th-->" + ((personyears >= 13) && ((vs.getRespiratoryRate() >= 12) && (vs.getRespiratoryRate() <= 20))));

            Boolean isNormal = ((personyears >= 1 && personyears <= 3) && ((vs.getRespiratoryRate() >= 20) && (vs.getRespiratoryRate() <= 30)))
                    || ((personyears == 4 || personyears == 5) && ((vs.getRespiratoryRate() >= 20) && (vs.getRespiratoryRate() <= 30)))
                    || ((personyears >= 6 && personyears <= 12) && ((vs.getRespiratoryRate() >= 20) && (vs.getRespiratoryRate() <= 30)))
                    || ((personyears >= 13) && ((vs.getRespiratoryRate() >= 12) && (vs.getRespiratoryRate() <= 20)));
            System.out.println("isNormal--->" + isNormal);
            if (isNormal) {
                barchart.setValue(vs.getRespiratoryRate(), "Noraml", vs.getVitalCapDate());
                System.out.println("======inside if condition----------" + vs.getVitalCapDate());
                continue;
            } else {
                barchart.setValue(vs.getRespiratoryRate(), "AbNoraml", vs.getVitalCapDate());
                System.out.println(" in side else condition--------");
                System.out.println("======inside if condition----------" + vs.getVitalCapDate());
            }

        }
        //((BarRenderer) cplot.getRenderer()).setBarPainter(new StandardBarPainter());

        JFreeChart bar = ChartFactory.createBarChart3D("Respiratory Rate", "Records", "R per minutes", barchart, PlotOrientation.VERTICAL, true, true, true);

        CategoryPlot cplot = (CategoryPlot) bar.getPlot();
        cplot.setBackgroundPaint(SystemColor.black);

        BarRenderer r = (BarRenderer) bar.getCategoryPlot().getRenderer();
        r.setSeriesPaint(0, Color.red);
        r.setSeriesPaint(1, Color.green);

        CategoryPlot p1 = bar.getCategoryPlot();
        p1.setRangeGridlinePaint(Color.white);
        ChartFrame frame = new ChartFrame("barchart", bar);
        frame.setVisible(true);
        frame.setSize(450, 350);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultCategoryDataset barchart = new DefaultCategoryDataset();

        for (VitalSign vs : patient.getVitalList().getVitalList()) {

            if (((personyears >= 1 && personyears <= 3) && ((vs.getHeartRate() >= 80) && (vs.getHeartRate() <= 130)))
                    || ((personyears == 4 || personyears == 5) && ((vs.getHeartRate() >= 80) && (vs.getHeartRate() <= 120)))
                    || ((personyears >= 6 && personyears <= 12) && ((vs.getHeartRate() >= 70) && (vs.getHeartRate() <= 110)))
                    || ((personyears >= 13) && ((vs.getHeartRate() >= 55) && (vs.getHeartRate() <= 105)))) {
                barchart.setValue(vs.getHeartRate(), "Noraml", vs.getVitalCapDate());
                System.out.println("======inside if condition----------" + vs.getVitalCapDate());
            } else {
                barchart.setValue(vs.getHeartRate(), "AbNoraml", vs.getVitalCapDate());

                System.out.println(" in side else condition--------");
                System.out.println("======inside if condition----------" + vs.getVitalCapDate());
            }

        }
        JFreeChart bar = ChartFactory.createBarChart3D("Heart Rate", "Records", "H per minutes", barchart, PlotOrientation.VERTICAL, true, true, true);
        CategoryPlot p1 = bar.getCategoryPlot();

        CategoryPlot cplot = (CategoryPlot) bar.getPlot();
        cplot.setBackgroundPaint(SystemColor.black);

        BarRenderer r = (BarRenderer) bar.getCategoryPlot().getRenderer();
        r.setSeriesPaint(0, Color.red);
        r.setSeriesPaint(1, Color.green);

        p1.setRangeGridlinePaint(Color.white);
        ChartFrame frame = new ChartFrame("barchart", bar);
        frame.setVisible(true);
        frame.setSize(450, 350);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        DefaultCategoryDataset barchart = new DefaultCategoryDataset();

        for (VitalSign vs : patient.getVitalList().getVitalList()) {

            if (((personyears >= 1 && personyears <= 3) && ((vs.getBloodPressure() >= 80) && (vs.getBloodPressure() <= 110)))
                    || ((personyears == 4 || personyears == 5) && ((vs.getBloodPressure() >= 80) && (vs.getBloodPressure() <= 110)))
                    || ((personyears >= 6 && personyears <= 12) && ((vs.getBloodPressure() >= 70) && (vs.getBloodPressure() <= 120)))
                    || ((personyears >= 13) && ((vs.getBloodPressure() >= 110) && (vs.getBloodPressure() <= 120)))) {
                barchart.setValue(vs.getBloodPressure(), "Noraml", vs.getVitalCapDate());
                System.out.println("======inside if condition----------" + vs.getVitalCapDate());
                continue;
            } else {
                barchart.setValue(vs.getBloodPressure(), "AbNoraml", vs.getVitalCapDate());

                System.out.println(" in side else condition--------");
                System.out.println("======inside if condition----------" + vs.getVitalCapDate());
            }

        }
        JFreeChart bar = ChartFactory.createBarChart3D("Blood Pressure", "Records", "B per minutes", barchart, PlotOrientation.VERTICAL, true, true, true);
        
        CategoryPlot cplot = (CategoryPlot) bar.getPlot();
        cplot.setBackgroundPaint(SystemColor.black);

        BarRenderer r = (BarRenderer) bar.getCategoryPlot().getRenderer();
        r.setSeriesPaint(0, Color.red);
        r.setSeriesPaint(1, Color.green);
        
        CategoryPlot p1 = bar.getCategoryPlot();
        p1.setRangeGridlinePaint(Color.white);
        ChartFrame frame = new ChartFrame("barchart", bar);
        frame.setVisible(true);
        frame.setSize(450, 350);

    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        DefaultCategoryDataset barchart = new DefaultCategoryDataset();

        for (VitalSign vs : patient.getVitalList().getVitalList()) {
            boolean isNormal=((personyears >= 1 && personyears <= 3) && ((vs.getWeight() >= 22) && (vs.getWeight() <= 31)))
                    || ((personyears == 4 || personyears == 5) && ((vs.getWeight() >= 31) && (vs.getWeight() <= 40)))
                    || ((personyears >= 6 && personyears <= 12) && ((vs.getWeight() >= 41) && (vs.getWeight() <= 92)))
                    || ((personyears >= 13) && (vs.getWeight() >= 110));
            System.out.println("isNormal--->"+isNormal);
            if (isNormal) {
                barchart.setValue(vs.getWeight(), "Noraml", vs.getVitalCapDate());
                System.out.println("======inside if condition----------" + vs.getVitalCapDate());
                continue;
            } else {
                barchart.setValue(vs.getWeight(), "AbNoraml", vs.getVitalCapDate());

                System.out.println(" in side else condition--------");
                System.out.println("======inside else condition----------" + vs.getVitalCapDate());
            }

        }
        JFreeChart bar = ChartFactory.createBarChart3D("Weight", "Records", "Time", barchart, PlotOrientation.VERTICAL, true, true, true);
        
         CategoryPlot cplot = (CategoryPlot) bar.getPlot();
        cplot.setBackgroundPaint(SystemColor.black);

        BarRenderer r = (BarRenderer) bar.getCategoryPlot().getRenderer();
         r.setSeriesPaint(0, Color.green);
        r.setSeriesPaint(1, Color.red);
       
        
        CategoryPlot p1 = bar.getCategoryPlot();
        p1.setRangeGridlinePaint(Color.white);
        ChartFrame frame = new ChartFrame("barchart", bar);
        frame.setVisible(true);
        frame.setSize(450, 350);
    }//GEN-LAST:event_jButton4ActionPerformed
    /*
     for (VitalSign vitalSign : person.getPatient().getVitalSignHistory().getVitalSignList()) {
     if (vitalSign.getRespiratoryRate() > 19 && vitalSign.getRespiratoryRate() < 31 && person.getAge() >= 1 && person.getAge() < 13) {
     barChart.setValue(vitalSign.getRespiratoryRate(), "NORMAL", vitalSign.getTimestamp());
     continue;
     }
     if (vitalSign.getRespiratoryRate() > 11 && vitalSign.getRespiratoryRate() < 21 && person.getAge() > 12) {
     barChart.setValue(vitalSign.getRespiratoryRate(), "NORMAL", vitalSign.getTimestamp());
     continue;
     } else {
     barChart.setValue(vitalSign.getRespiratoryRate(), "ABNORMAL", vitalSign.getTimestamp());
     }
     }
     JFreeChart bar = ChartFactory.createBarChart3D("RESPIRATORY RATE", "RECORDS", "BREATH'S PER MINUTE", barChart, PlotOrientation.VERTICAL, true, true, false);
     CategoryPlot p = bar.getCategoryPlot();
     p.setRangeGridlinePaint(Color.black);
     ChartFrame frame = new ChartFrame("BarChart", bar);
     frame.setVisible(true);
     frame.setSize(450, 350);
    
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton1;
    private javax.swing.JTextField heartRateTxt;
    private javax.swing.JTextField heartRateTxt1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField locationLatiTxt;
    private javax.swing.JTextField locationLatiTxt1;
    private javax.swing.JTextField locationLongTxt;
    private javax.swing.JTextField locationLongTxt1;
    private javax.swing.JTextField respRateTxt;
    private javax.swing.JTextField respRateTxt1;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField sysBloodPresTxt;
    private javax.swing.JTextField sysBloodPresTxt1;
    private javax.swing.JButton viewBtn;
    private javax.swing.JTable vitalSignTable;
    private javax.swing.JTextField weightInPoundsTxt;
    private javax.swing.JTextField weightInPoundsTxt1;
    // End of variables declaration//GEN-END:variables
}
