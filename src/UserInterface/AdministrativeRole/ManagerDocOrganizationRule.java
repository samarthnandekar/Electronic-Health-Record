/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdministrativeRole;

import Business.EnterPrise.HospitalEnterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Rules.Rule;
import Business.Rules.RuleDirectory;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author samar
 */
public class ManagerDocOrganizationRule extends javax.swing.JPanel {

    /**
     * Creates new form ManagerDocOrganizationRule
     */
    private JPanel userProcessContainer;
    private Organization organization;
    private ArrayList <String> medicineList;
    public ManagerDocOrganizationRule(JPanel userProcessContainer,Organization currOrganization) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.organization=currOrganization;
        populateRuleTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainMedicineNameTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mediCineTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        notApplicableMedecineTxt = new javax.swing.JTextArea();
        ruleNameTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        add(mainMedicineNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 220, 89, -1));

        jLabel1.setText("Medicine Name:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 220, -1, -1));

        mediCineTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Rule Name", "Medicine Name", "medicine Name that can not be given with Combination"
            }
        ));
        jScrollPane1.setViewportView(mediCineTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 340, 670, 110));

        jLabel2.setText("Can not give Together");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 170, -1, -1));

        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 180, 100, 35));

        notApplicableMedecineTxt.setColumns(20);
        notApplicableMedecineTxt.setRows(5);
        jScrollPane2.setViewportView(notApplicableMedecineTxt);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 140, -1, -1));
        add(ruleNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, 90, -1));

        jLabel3.setText("Rule Name:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 140, -1, -1));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 660, 100, 35));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Create Rule");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 30, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Added Rule:-");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 310, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Note:-Please place \";\" after each medicine name.");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 270, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String ruleName=ruleNameTxt.getText();
        String mainMedicine=mainMedicineNameTxt.getText();
        String notApplicableMEdicine=notApplicableMedecineTxt.getText();
        
        boolean isUserInputValid=checkUserInput(ruleName,mainMedicine,notApplicableMEdicine);
        
        if(organization instanceof DoctorOrganization)
        {
            DoctorOrganization doctorOrganization= (DoctorOrganization)organization;
            RuleDirectory ruleDirectory=doctorOrganization.getRuleDirectory();
            
            List<Rule> ruleList=ruleDirectory.getRuleList();
           
            medicineList= new ArrayList<>(); 
            
            
            
            Rule rule= new Rule();
            rule.setRuleName(ruleName);
            HashMap<String,ArrayList<String>> currRuleList = rule.getDetailRule();
            //medicineList=Arrays.asList(notApplicableMEdicine.split(";"));
            String [] medicines=notApplicableMEdicine.split(";");
            for(int i=0;i<medicines.length;i++)
            {
               medicineList.add(medicines[i]); 
            }
            currRuleList.put(mainMedicine, medicineList);
            rule.setDdetailRule(currRuleList);
            ruleList.add(rule);
        }
        populateRuleTable();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    public boolean checkUserInput(String ruleName,String mainMedicine,String notAppMedicine)
    {
        String validationerror = "Please correct the following error:";

        
        // validation for rule name
        if ((ruleName.trim()).equals(""))
        {
            validationerror = validationerror + "\n" + "Please enter the Rule Name";
        }
        if (!(ruleName.trim()).equals("") && !(ruleName.trim()).equals("null")
                && !((ruleName.trim()).matches("[a-zA-Z]*"))) {
            validationerror = validationerror + "\n" + "Rule name should "
                    + "contain characters only";
        }
        
        // validation for medicine name
        if ((mainMedicine.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the Medicine name";
        }
        if (!(mainMedicine.trim()).equals("") && !(mainMedicine.trim()).equals("null")
                && !((mainMedicine.trim()).matches("[a-zA-Z]*"))) {
            validationerror = validationerror + "\n" + "Medicine name should "
                    + "contain characters only";
        }
        
         if (validationerror.equals("Please correct the following error:"))
         {
          JOptionPane.showMessageDialog(null, "Thanks for details, Rule is record created");
         
            return true;
        }
        else
        {
         JOptionPane.showMessageDialog(null, validationerror);
         return false;
        }
        
        
    }
    
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    public void populateRuleTable()
    {
        DefaultTableModel model = (DefaultTableModel) mediCineTable.getModel();
        
        model.setRowCount(0);
        System.out.println("== inside the pup;ta tale===");
        if(organization instanceof DoctorOrganization)
        {
            DoctorOrganization doctorOrganization= (DoctorOrganization)organization;
            RuleDirectory ruleDirectory=doctorOrganization.getRuleDirectory();
            
            System.out.println("== inside the if loop===");
            
            for(Rule rule:ruleDirectory.getRuleList())
            {
              System.out.println("== inside the first for loop===");
              Object[] row = new Object[4];
              row[0] = rule; 
                System.out.println("rule value-->"+rule);
              HashMap<String,ArrayList<String>> currRuleList = rule.getDetailRule();
              for (Map.Entry<String, ArrayList<String>> entry : currRuleList.entrySet())
              {
                row[1]=entry.getKey();
                  System.out.println("==== kay value===="+entry.getKey());
                  row[2]=entry.getValue();
              }
              model.addRow(row);
            }
            
            
        }
  
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField mainMedicineNameTxt;
    private javax.swing.JTable mediCineTable;
    private javax.swing.JTextArea notApplicableMedecineTxt;
    private javax.swing.JTextField ruleNameTxt;
    // End of variables declaration//GEN-END:variables
}
