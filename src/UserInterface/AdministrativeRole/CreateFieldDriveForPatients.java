/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdministrativeRole;

import Business.EcoSystem;
import Business.EnterPrise.Enterprise;
import Business.EnterPrise.HospitalEnterprise;
import Business.FieldDrive.FieldDriveForPatients;
import Business.Organization.FieldDriveOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.FieldDrivePatientWorkRequest;
import Business.WorkQueue.VitalAlertRequestToAmbulanceReception;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author samar
 */
public class CreateFieldDriveForPatients extends javax.swing.JPanel {

    /**
     * Creates new form CreateFieldDriveForPatients
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;
    private UserAccount userAccount;
    private Organization organization;
    private HospitalEnterprise hospitalEnterprise;
    private ArrayList<UserAccount> availableEmpname;
    private ArrayList<UserAccount> selectedempNames;
    private Date startDate;
    private Date endDate;
    public CreateFieldDriveForPatients(JPanel userProcessContainer, UserAccount userAccount, Organization org, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        this.organization = org;
        this.userAccount = userAccount;
        if (enterprise instanceof HospitalEnterprise)
       {
          hospitalEnterprise=(HospitalEnterprise)enterprise; 
       }
        populateDrivePatientTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        drivePatientTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        driveNameTxt = new javax.swing.JTextField();
        startDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        endDatepicker = new org.jdesktop.swingx.JXDatePicker();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        empFieldDriveAgentTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        availableEmpNameTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Create Fields Drive");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(888, 26, -1, -1));

        drivePatientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Drive Name", "Start Date", "End Date"
            }
        ));
        drivePatientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drivePatientTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(drivePatientTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 96, 714, 94));

        jLabel2.setText("Drive Name:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 245, -1, -1));
        add(driveNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(582, 236, 109, 35));
        add(startDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(582, 311, -1, -1));

        jLabel3.setText("Start Date");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 319, -1, -1));

        jLabel4.setText("End Date");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(772, 319, -1, -1));
        add(endDatepicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 311, -1, -1));

        jButton1.setText("Create Drive");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 391, -1, 36));

        empFieldDriveAgentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(empFieldDriveAgentTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 614, 714, 102));

        availableEmpNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "User Name", "Phone Numner", "Email ID"
            }
        ));
        jScrollPane3.setViewportView(availableEmpNameTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(425, 445, 714, 102));

        jButton2.setText("Add Employee to Drive");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1208, 445, -1, 36));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 860, -1, 35));

        jButton3.setText("Search Availabe Employee");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 385, -1, 40));
    }// </editor-fold>//GEN-END:initComponents

    public void populateDrivePatientTable()
    {
        DefaultTableModel dtm = (DefaultTableModel) drivePatientTable.getModel();
        dtm.setRowCount(0);
        for(FieldDriveForPatients filDriveForPatients:hospitalEnterprise.getFieldDriveForPatientsList().getFdForPatientsList())
        {
            Object row[] = new Object[4];
            row[0] = filDriveForPatients;
            
            Date startDate=filDriveForPatients.getDrivestartDate();
            SimpleDateFormat sdf1 = new SimpleDateFormat("MM/dd/YYYY");
            String formateStartDate = sdf1.format(startDate);
            row[1] = formateStartDate;
            
            Date endDate=filDriveForPatients.getDriveendDate();
            String strendDate=sdf1.format(endDate);
            row[2] = strendDate;
            dtm.addRow(row);
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       String driveName= driveNameTxt.getText();
       startDate=startDatePicker.getDate();
       endDate=endDatepicker.getDate();
       
       boolean isUserInputvalid=checkUserInput(driveName);
       if (isUserInputvalid)
       {
           if(startDate.before(endDate)&& endDate.after(new Date()))
           {
           FieldDriveForPatients filDriveForPatients=hospitalEnterprise.getFieldDriveForPatientsList().addFieldDrives();
           filDriveForPatients.setDrivename(driveName);
           filDriveForPatients.setDrivestartDate(startDate);
           filDriveForPatients.setDriveendDate(endDate);
           populateDrivePatientTable();  
           }
           else
           {
               JOptionPane.showMessageDialog(null, "please select correct dates"); 
           }
           
       }
       /*else
       {
           JOptionPane.showMessageDialog(null, "Please enter the valid value");
       }
       */
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       
        int selectedDrive = drivePatientTable.getSelectedRow();
        int selectedemp = availableEmpNameTable.getSelectedRow();
        if (selectedemp >= 0) {
            
            if(selectedDrive>=0)
            {
               FieldDriveForPatients frForPatients = (FieldDriveForPatients) drivePatientTable.getValueAt(selectedDrive, 0); 
               selectedempNames=frForPatients.getUserfdList();
               
                FieldDrivePatientWorkRequest fdpwr = new FieldDrivePatientWorkRequest();
                fdpwr.setStartDate(startDate);
                fdpwr.setEndDate(endDate);
                fdpwr.setMessage(frForPatients.getDrivename());
                UserAccount ua = (UserAccount) availableEmpNameTable.getValueAt(selectedemp, 0);
                System.out.println("ua name==>"+ua.getUsername());
                selectedempNames.add(ua);
                availableEmpname.remove(ua);
                ua.getWorkQueue().getWorkRequestList().add(fdpwr);
                
                
                System.out.println("selectedempNames-->"+selectedempNames.size());
                frForPatients.setUserfdList(selectedempNames);
                System.out.println("frForPatients.getUserfdList().size();-->"+frForPatients.getUserfdList().size());
                System.out.println("below ---1.1. in add emp---"+frForPatients.getDrivename());
                populateavailableEmployee();
                assignEmployee();
            }
            else
            {
             JOptionPane.showMessageDialog(null, "Please select Drive from table");    
            } 
        }
        else
        {
          JOptionPane.showMessageDialog(null, "Please select emp from table");  
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int selectedRow = drivePatientTable.getSelectedRow();
        if (selectedRow >= 0) {
            FieldDriveOrganization fieldDriveOrg = null;
            this.availableEmpname = new ArrayList<>();
            Date today = new Date();
            if(startDate == null || endDate == null){
                JOptionPane.showMessageDialog(null, "sry no agents could be assigned nw!!!");
                return;
            }
            if (startDate.before(endDate)) {
                if (startDate.after(today)) {
                    for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof FieldDriveOrganization) {
                            fieldDriveOrg = (FieldDriveOrganization) org;
                            System.out.println("fieldDriveOrg--->"+fieldDriveOrg);
                        }
                    }
                }
            }

            if (startDate.before(endDate) && startDate.after(today) && fieldDriveOrg != null) {

                System.out.println("fieldDriveOrg.getUserAccountDirectory().getUserAccountList()-->"+fieldDriveOrg.getUserAccountDirectory().getUserAccountList());
                two:
                for (UserAccount ua : fieldDriveOrg.getUserAccountDirectory().getUserAccountList()) {

                    boolean checkava = true;
                    if (ua.getWorkQueue().getWorkRequestList().size() != 0) {
                        one:
                        for (WorkRequest wr : ua.getWorkQueue().getWorkRequestList()) {

                            if (wr instanceof FieldDrivePatientWorkRequest) {
                                FieldDrivePatientWorkRequest fdpwr = (FieldDrivePatientWorkRequest) wr;

                                if ((startDate.after(fdpwr.getStartDate())
                                        && startDate.before(fdpwr.getEndDate()))
                                        || (endDate.after(fdpwr.getStartDate())
                                        && endDate.before(fdpwr.getEndDate()))
                                        || (startDate.equals(fdpwr.getStartDate())
                                        || startDate.equals(fdpwr.getEndDate())
                                        || endDate.equals(fdpwr.getStartDate())
                                        || endDate.equals(fdpwr.getEndDate()))) {
                                    checkava = false;
                                    break one;
                                }
                            }
                        }
                    }
                    if (checkava) {
                        availableEmpname.add(ua);
                    }
                    populateavailableEmployee();
                }
            } else {
                JOptionPane.showMessageDialog(null, "ERROR IN DATE OR FIELD ORG NOT CREATED!!!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "SELECT A ROW!!!");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void drivePatientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drivePatientTableMouseClicked
       assignEmployee();
    }//GEN-LAST:event_drivePatientTableMouseClicked

    public void assignEmployee() {
        DefaultTableModel dtm = (DefaultTableModel) empFieldDriveAgentTable.getModel();
        dtm.setRowCount(0);
        int selected = drivePatientTable.getSelectedRow();
        FieldDriveForPatients fDFp = (FieldDriveForPatients) drivePatientTable.getValueAt(selected, 0);
        System.out.println("below ---1.1. in add emp---"+fDFp.getDrivename());
        System.out.println("fDFp.getUserfdList()--->"+fDFp.getUserfdList().size());
        for (UserAccount ua : fDFp.getUserfdList()) {
            System.out.println("");
            Object row[] = new Object[3];
            row[0] = ua.getUsername();
            row[1] = ua.getEmployee();
            //row[2] = ua.getUserName();
            dtm.addRow(row);
        }
    }
    
  
    public void populateavailableEmployee() {
        DefaultTableModel dtm = (DefaultTableModel) availableEmpNameTable.getModel();
        dtm.setRowCount(0);

        for (UserAccount ua : availableEmpname) {
            Object row[] = new Object[5];
            row[0] = ua;
            row[1] = ua.getEmployee().getFirstName()+" "+ ua.getEmployee().getLastName();
            row[2] = ua.getEmployee().getPhoneNo();
            row[3] = ua.getEmployee().getEmailID();
            dtm.addRow(row);
        }
    }
    
    
public boolean checkUserInput(String driveName)
{
    String validationerror = "Please correct the following error:";

        
        // validation for First Name
        if ((driveName.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the drive name";
        }
        if (!(driveName.trim()).equals("") && !(driveName.trim()).equals("null")
                && !((driveName.trim()).matches("[a-zA-Z]*"))) {
            validationerror = validationerror + "\n" + "drive name should "
                    + "contain characters only";
        }
        if (validationerror.equals("Please correct the following error:")) {
            validationerror = "Thanks for details";
            //JOptionPane.showMessageDialog(null, validationerror);
            return true;
        }
        else
        {
         JOptionPane.showMessageDialog(null, validationerror);
         return false;
        }

}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable availableEmpNameTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JTextField driveNameTxt;
    private javax.swing.JTable drivePatientTable;
    private javax.swing.JTable empFieldDriveAgentTable;
    private org.jdesktop.swingx.JXDatePicker endDatepicker;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private org.jdesktop.swingx.JXDatePicker startDatePicker;
    // End of variables declaration//GEN-END:variables
}
