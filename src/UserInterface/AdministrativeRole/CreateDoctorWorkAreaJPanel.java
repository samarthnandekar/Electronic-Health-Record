/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AdministrativeRole;

import Business.Doctor.Doctor;
import Business.Doctor.DoctorDepartment;
import Business.EcoSystem;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Organization.OrganizationDirectory;
import Business.Person.Person;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samarth
 */
public class CreateDoctorWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CreateDoctorWorkAreaJPanel
     */
    private OrganizationDirectory organizationDir;
    private JPanel userProcessContainer;
    private EcoSystem ecoSystem;
    private DoctorDepartment doctorDepartment;
    private DoctorOrganization doctorOrganization;
    
    public CreateDoctorWorkAreaJPanel(JPanel ups, DoctorDepartment docdep,EcoSystem ecoSystem,DoctorOrganization docOrg) {
        initComponents();
        userProcessContainer=ups;
        this.ecoSystem=ecoSystem;
        doctorDepartment=docdep;
        doctorOrganization=docOrg;
        populatePersonTable();
        popDocDepartmentComboBox();
    }

    public void popDocDepartmentComboBox() {
        selectDocDepartmentCmb.removeAllItems();
         ArrayList<DoctorDepartment> doctorDepartmentCatalog=doctorOrganization.getDoctorDepartmentCatalog().getDoctorDepartmentCatalog();
        
         for (DoctorDepartment doctorDepartment : doctorDepartmentCatalog)
        {
            selectDocDepartmentCmb.addItem(doctorDepartment);
        }
    }
    
    
    public void populatePersonTable()
    {
        DefaultTableModel model = (DefaultTableModel) personTable.getModel();  
        model.setRowCount(0);
        for (Person person : ecoSystem.getPersonDirectory().getPersonList())
        {
            Object[] row = new Object[3];
            row[0] = person;
            row[1] = person.getLastName();
           //row[1] = employee.getFirstName();
            model.addRow(row);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        personTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        docEducationTxt = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        detailDocTable = new javax.swing.JTable();
        selectDocDepartmentCmb = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        personTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Last Name", "Phone No", "Email ID", "Emp Id"
            }
        ));
        jScrollPane1.setViewportView(personTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, 770, 180));

        jButton1.setText("Create Doctor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 360, 123, 35));

        jLabel1.setText("Doctor specialization:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 290, -1, 20));
        add(docEducationTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 282, 150, 30));

        detailDocTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Doctor Name", "Doctor Specialization", "Doctor Department", "Phone No", "Email ID"
            }
        ));
        jScrollPane2.setViewportView(detailDocTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 530, 750, 160));

        selectDocDepartmentCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectDocDepartmentCmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDocDepartmentCmbActionPerformed(evt);
            }
        });
        add(selectDocDepartmentCmb, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 440, 133, 35));

        jLabel2.setText("Select Doctor Department");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 450, -1, -1));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 740, 100, 35));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Create Doctor Work Area");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 20, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

     int selectedRow=personTable.getSelectedRow();
                 
        if(selectedRow>=0)
        {
            String docedu=docEducationTxt.getText();
            boolean isvalidinput=checkUserInput(docedu);
            if(isvalidinput)
            {
              Person person =(Person)personTable.getValueAt(selectedRow,0);
           Doctor doctor= new Doctor();
           doctor.setFirstName(person.getFirstName());
           doctor.setLastName(person.getLastName());
           doctor.setDob(person.getDob());
           doctor.setEmailID(person.getEmailID());
           doctor.setPhoneNo(person.getPhoneNo());
           doctor.setInsuranceCode(person.getInsuranceCode());
           doctor.setPersonID(person.getPersonID());
           doctor.setUsername(person.getUsername());
           doctor.setPassword(person.getPassword());
           doctor.setLatitude(person.getLatitude());
           doctor.setLongitude(person.getLongitude());
           doctor.setDocEducation(docEducationTxt.getText());
           doctorDepartment.getDoctorDirectory().addDoctor(doctor);
           doctor.setDocDepartment(doctorDepartment.toString());
          populateTable(doctorDepartment);  
            }
           // else
       // {
         //   JOptionPane.showMessageDialog(null, "Please enter valid value for Doc education field");
       // }
           
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please select row first");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    public boolean checkUserInput(String docEdu)
    {
       String validationerror = "Please correct the following error:";
        // validation for userName
        if ((docEdu.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the Doctor Specialization ";
        }

        if (!(docEdu.trim()).equals("") && !(docEdu.trim()).equals("null")
                && !((docEdu.trim()).matches("[a-zA-Z ]*"))) {
            validationerror = validationerror + "\n" + "Department Name should "
                    + "contain Alphabet and numbers only";
        }

        if ((!(docEdu.trim()).equals("")) && (!(docEdu.trim().length() < 10))) {
            validationerror = validationerror + "\n" + " Department Name lenght should be less than 10";
        }

        if (validationerror.equals("Please correct the following error:")) {
            validationerror = "Thanks for details";
            //JOptionPane.showMessageDialog(null, validationerror);
            return true;
        } else {
            JOptionPane.showMessageDialog(null, validationerror);
            return false;
        }
     
    }
    
    private void selectDocDepartmentCmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDocDepartmentCmbActionPerformed
       DoctorDepartment doctorDepartment = (DoctorDepartment) selectDocDepartmentCmb.getSelectedItem();
        if (doctorDepartment != null){
            populateTable(doctorDepartment);
        }
    }//GEN-LAST:event_selectDocDepartmentCmbActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void populateTable(DoctorDepartment doctorDepartment){
        DefaultTableModel model = (DefaultTableModel) detailDocTable.getModel();
        model.setRowCount(0);
        for (Doctor doctor : doctorDepartment.getDoctorDirectory().getDoctorList() ){
            Object[] row = new Object[5];
            row[0] = doctor.getFirstName()+" "+ doctor.getLastName();
            row[1]=doctor.getDocEducation();
            row[2]=doctor.getDocDepartment();
            row[3]=doctor.getPhoneNo();
            row[4]=doctor.getEmailID();
            //row[1] = employee.getFirstName();
            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable detailDocTable;
    private javax.swing.JTextField docEducationTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable personTable;
    private javax.swing.JComboBox selectDocDepartmentCmb;
    // End of variables declaration//GEN-END:variables
}
