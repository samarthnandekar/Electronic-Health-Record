/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Cashier;

import Business.EcoSystem;
import Business.EnterPrise.Enterprise;
import Business.Organization.CashierOrganization;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.PatientVisit.Visit;
import Business.UserAccount.UserAccount;
import Business.VisitPayment.VisitCharges;
import Business.WorkQueue.CollectVisitChargesWorkRequest;
import Business.WorkQueue.VitalTestWorkRequest;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author samar
 */
public class CashierWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CashierWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;
    private CashierOrganization cashierOrganization;
    
    public CashierWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        userAccount = account;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        labelValue.setText(organization.getOrgName());
        if (organization instanceof CashierOrganization) {
            cashierOrganization = (CashierOrganization) organization;
        }
        populateStatusCombobox();
        populateTable("BillGenerated");
    }
    
    public void populateTable(String requestStatus) {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        System.out.println("=== inside populate table=== cash");
        model.setRowCount(0);
        WorkQueue workQueue = cashierOrganization.getWorkQueue();
        for (WorkRequest request : workQueue.getWorkRequestList()) {
            if (request instanceof CollectVisitChargesWorkRequest) {
                CollectVisitChargesWorkRequest cVCW = (CollectVisitChargesWorkRequest) request;
                System.out.println("=== inside populate table=== cash2222");
                Visit visit = cVCW.getVisit();
                
                String billStatus = visit.getVisitCharges().getPaymentStatus().getValue();
                if (requestStatus.equals(billStatus)) {
                    System.out.println("=== inside populate table=== cash33333");
                    Object[] row = new Object[9];
                    row[0] = cVCW;
                    Date date = cVCW.getRequestDate();
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/YYYY");
                    String dateinStr = simpleDateFormat.format(date);
                    row[1] = dateinStr;
                    row[2] = cVCW.getStatus();
                    row[3] = cVCW.getVisit().getPatient().getFirstName() + " " + cVCW.getVisit().getPatient().getFirstName();
                    row[4] = cVCW.getVisit().getPatient().getMrn();
                    if (cVCW.getReceiver() != null) {
                        row[5] = cVCW.getReceiver().getEmployee().getFirstName() + " " + cVCW.getReceiver().getEmployee().getLastName();
                        
                        row[6] = simpleDateFormat.format(cVCW.getResolveDate());                        
                        row[7] = cVCW.getVisit().getVisitCharges().getPatientVisitCharge();
                    }
                    
                    model.addRow(row);                    
                }
            }
            
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        requestStatusComboBox = new javax.swing.JComboBox();
        saveBtn = new javax.swing.JButton();
        visitChargesTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        labelValue = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Doctor Name", "Requested Date", "Requested Status", "Patient Name", "Patient MRN", "Receiver Name", "received Date", "Visit Charges"
            }
        ));
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 140, 910, 90));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Cash Request");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 80, -1, -1));

        requestStatusComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        requestStatusComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestStatusComboBoxActionPerformed(evt);
            }
        });
        add(requestStatusComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 90, 130, 35));

        saveBtn.setText("save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        add(saveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 400, 100, 35));
        add(visitChargesTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 290, 85, 30));

        jLabel2.setText("Visit Charges:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 290, -1, -1));

        labelValue.setText("jLabel3");
        add(labelValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Welcome to");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 10, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void populateStatusCombobox() {
        requestStatusComboBox.removeAllItems();
        //requestStatusComboBox.addItem("");
        requestStatusComboBox.addItem("BillGenerated");
        requestStatusComboBox.addItem("BillReceived");
        
    }
    

    private void requestStatusComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestStatusComboBoxActionPerformed
        
        String requestStatus = (String) requestStatusComboBox.getSelectedItem();
        System.out.println("requestStatus-->" + requestStatus);
        // below if condition to save from null value
        if (requestStatus != null) {
            populateTable(requestStatus);
            clearText();
        }

    }//GEN-LAST:event_requestStatusComboBoxActionPerformed
    
    public void clearText() {
        visitChargesTxt.setText("");
    }
    
    public boolean checkForValidVisitCharges(String visitCharges) {
        String validationerror = "Please correct the following error:";

        // validation for First Name
        if ((visitCharges.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the visit Charges";
        }
        if (!(visitCharges.trim()).equals("") && !(visitCharges.trim()).equals("null")
                && !((visitCharges.trim()).matches("[0-9]*"))) {
            validationerror = validationerror + "\n" + "visit Charges should "
                    + "contain numbers only";
        }        
        
        if (!(visitCharges.equals("")) && ((visitCharges.toString().trim()).matches("[0-9]*"))) {
            Float floatWeightInPounds = Float.parseFloat(visitCharges);
            if ((!((floatWeightInPounds > 300) && (floatWeightInPounds < 3500)))) {
                validationerror = validationerror + "\n" + "Visit charge can not be  "
                        + "less than 300 and greater than 3500";                
            }
            
        }
        
        if (validationerror.equals("Please correct the following error:")) {
            validationerror = "Thanks for details";
            //JOptionPane.showMessageDialog(null, validationerror);
            return true;
        } else {
            JOptionPane.showMessageDialog(null, validationerror);
            return false;
        }
        
    }
    
    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow >= 0) {
            CollectVisitChargesWorkRequest cVCWR = (CollectVisitChargesWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
            String strVisitCharge = visitChargesTxt.getText();
            boolean isValidVisitCharges = checkForValidVisitCharges(strVisitCharge);
            if (isValidVisitCharges) {
                cVCWR.setReceiver(userAccount);
                Date date = new Date();
                cVCWR.setResolveDate(date);
                cVCWR.setStatus("Completed");
                
                Visit visit = cVCWR.getVisit();
                Patient patient=visit.getPatient();
                
                VisitCharges visitCharges = visit.getVisitCharges();
                
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat();
                String todayDate = simpleDateFormat.format(date);
                visitCharges.setPaymentDate(todayDate);
                visitCharges.setPaymentStatus(VisitCharges.PaymentStatus.BillReceived);
                visitCharges.setPatientVisitCharge(Integer.parseInt(strVisitCharge));
                
                patient.getVisitPaymentList().addVisitPayment(visitCharges);
                
                JOptionPane.showMessageDialog(null, "Thanks");
            }
            
        } else {
            JOptionPane.showMessageDialog(null, "Please select the request first");
        }
    }//GEN-LAST:event_saveBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelValue;
    private javax.swing.JComboBox requestStatusComboBox;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField visitChargesTxt;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
