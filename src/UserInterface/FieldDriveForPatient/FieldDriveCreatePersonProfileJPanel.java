/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.FieldDriveForPatient;

import Business.EcoSystem;
import Business.EnterPrise.Enterprise;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author samar
 */
public class FieldDriveCreatePersonProfileJPanel extends javax.swing.JPanel {

    /**
     * Creates new form FieldDriveCreatePersonProfileJPanel
     */
     private JPanel userProcessContainer;
    private EcoSystem system;
    private Enterprise enterprise;
    public FieldDriveCreatePersonProfileJPanel(JPanel upc,Enterprise enterprise,EcoSystem ecoSystem) {
        initComponents();
        userProcessContainer=upc;
        system=ecoSystem;
        this.enterprise=enterprise;
        populatePersonTable();
        populateGenderCombox();
    }

     public void populateGenderCombox()
    {
        selectGenderCombox.removeAllItems();
        selectGenderCombox.addItem("Male");
        selectGenderCombox.addItem("Female");
    }
    public void populatePersonTable()
    {
      DefaultTableModel model = (DefaultTableModel) allPeronInfoTable.getModel();  
        model.setRowCount(0);
        for (Person person : system.getPersonDirectory().getPersonList())
        {
            Object[] row = new Object[10];
            row[0] = person.getFirstName();
            row[1] = person.getLastName();
            row[2] = person.getGender();
            row[3] = person.getDob();
            row[4] = person.getPhoneNo();
            row[5] = person.getEmailID();
            row[6] = person.getUsername();
            row[7] = person.getInsuranceCode();
            row[8] = person.getInsuranceCoverageLimit();
            
           //row[1] = employee.getFirstName();
            model.addRow(row);
        }  
        
    }
    
    
    
    public boolean checkSearchInput(String strSearchName)
    {
        String validationerror = "Please correct the following error:";
     
        if ((strSearchName.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the User Name";
        }
        
        if (!(strSearchName.trim()).equals("") && !(strSearchName.trim()).equals("null")
                && !((strSearchName.trim()).matches("[a-zA-Z0-9]*"))) {
            validationerror = validationerror + "\n" + "User Name should "
                    + "contain Alphabet and numbers only";
        }
        
        if((!(strSearchName.trim()).equals("")) && (!(strSearchName.trim().length()<10)))
          {
        validationerror = validationerror + "\n" + "Please enter the valid"
                                                     + " User Name, lenght should be less than 10";           
          }
         if (validationerror.equals("Please correct the following error:")) {
            validationerror = "Thanks for details";
            //JOptionPane.showMessageDialog(null, validationerror);
            return true;
        }
        else
        {
         JOptionPane.showMessageDialog(null, validationerror);
         return false;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        allPeronInfoTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        lNametxt = new javax.swing.JTextField();
        fNametxt = new javax.swing.JTextField();
        phoneNotxt = new javax.swing.JTextField();
        emailidtxt = new javax.swing.JTextField();
        insuranceCodeTxt = new javax.swing.JTextField();
        insuranceCoverLimitxt = new javax.swing.JTextField();
        userPassword = new javax.swing.JPasswordField();
        jLabel12 = new javax.swing.JLabel();
        userNameTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        selectDOBpicker = new org.jdesktop.swingx.JXDatePicker();
        selectGenderCombox = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        searchNameTxt = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        locationLongTxt = new javax.swing.JTextField();
        locationLatiTxt = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        allPeronInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Gender", "Date OF Birth", "Phone No", "Email ID", "user Name", "Insurance Code", "Insurance Code"
            }
        ));
        jScrollPane1.setViewportView(allPeronInfoTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 100, 960, 140));

        jLabel1.setText("Person details:-");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 70, -1, -1));

        jLabel2.setText("PLease provide the below details to register a person");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, -1, -1));

        jLabel3.setText("First Name:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 60, -1, -1));

        jLabel4.setText("Last Name:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 120, -1, -1));

        jLabel5.setText("Gender:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 160, -1, -1));

        jLabel6.setText("Date of Birth:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 220, -1, -1));

        jLabel7.setText("Phone No:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 280, -1, -1));

        jLabel8.setText("Email ID:");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 340, -1, -1));

        jLabel10.setText("Insurance Code:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 420, -1, -1));

        jLabel11.setText("Insurance Coverage Limit:");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 490, -1, -1));
        add(lNametxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 100, 120, 35));
        add(fNametxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 60, 120, 35));
        add(phoneNotxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 270, 120, 35));
        add(emailidtxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 330, 120, 35));

        insuranceCodeTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insuranceCodeTxtActionPerformed(evt);
            }
        });
        add(insuranceCodeTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 400, 120, 35));
        add(insuranceCoverLimitxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 470, 120, 35));
        add(userPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 580, 120, 35));

        jLabel12.setText("Password:");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 590, -1, -1));
        add(userNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 530, 120, 35));

        jLabel13.setText("User Name:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 550, -1, -1));

        jButton2.setText("Search peron");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 280, -1, 35));
        add(selectDOBpicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 210, -1, 30));

        selectGenderCombox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(selectGenderCombox, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 150, 120, 35));

        jButton3.setText("View All Profile");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 380, -1, 35));
        add(searchNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 280, 140, 30));

        jLabel9.setText("Note:- Enter User name for search the user profile.");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 330, -1, -1));

        jLabel14.setText("location latitude:");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 650, -1, -1));

        jLabel15.setText("Location longitude:");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 720, -1, -1));
        add(locationLongTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 710, 120, 35));
        add(locationLatiTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 640, 120, 35));

        jLabel16.setText("Note:- All the above fileds are mandatory");
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 770, -1, -1));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel17.setText("Person Registration");
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 10, -1, -1));

        jButton1.setText("Add Person");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 820, -1, 35));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 900, -1, 35));
    }// </editor-fold>//GEN-END:initComponents

    private void insuranceCodeTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insuranceCodeTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_insuranceCodeTxtActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        String strSearchName= searchNameTxt.getText();
        boolean isSearchInputValid=checkSearchInput(strSearchName);

        if(isSearchInputValid)
        {
            DefaultTableModel model = (DefaultTableModel) allPeronInfoTable.getModel();
            model.setRowCount(0);
            PersonDirectory pd=system.getPersonDirectory();
            for(Person person:pd.getPersonList())
            {
                if(person.getUsername().equalsIgnoreCase(strSearchName))
                {
                    Object[] row = new Object[10];
                    row[0] = person.getFirstName();
                    row[1] = person.getLastName();
                    row[2] = person.getGender();
                    row[3] = person.getDob();
                    row[4] = person.getPhoneNo();
                    row[5] = person.getEmailID();
                    row[6] = person.getUsername();
                    row[7] = person.getInsuranceCode();
                    row[8] = person.getInsuranceCoverageLimit();

                    //row[1] = employee.getFirstName();
                    model.addRow(row);

                }
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        populatePersonTable();
    }//GEN-LAST:event_jButton3ActionPerformed

    
    // function to validate the user Input
    public boolean checkUserInput(String firstName,String lastName,Date dobDate,String userPhone,String Uemails,String insurcenCode,String insuranceLimit,String userName,String uPassword,String latitude,String longitude)
    {
        String validationerror = "Please correct the following error:";

        
        // validation for First Name
        if ((firstName.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the First name";
        }
        if (!(firstName.trim()).equals("") && !(firstName.trim()).equals("null")
                && !((firstName.trim()).matches("[a-zA-Z]*"))) {
            validationerror = validationerror + "\n" + "First name should "
                    + "contain characters only";
        }
        
        // validation for Last Name
        if ((lastName.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the Last name";
        }
        if (!(lastName.trim()).equals("") && !(lastName.trim()).equals("null")
                && !((lastName.trim()).matches("[a-zA-Z]*"))) {
            validationerror = validationerror + "\n" + "Last name should "
                    + "contain characters only";
        }
        
        // validation for user Phone Number
        if ((userPhone.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the Phone Number";
        }
        if (!(userPhone.trim()).equals("") && !(userPhone.trim()).equals("null")
                && !((userPhone.trim()).matches("[0-9]*"))) {
            validationerror = validationerror + "\n" + "Phone Number should "
                    + "contain numbers only";
        }
        if((!(userPhone.trim()).equals("")) && (!(userPhone.trim().length()==10)))
          {
        validationerror = validationerror + "\n" + "Please enter the valid"
                                                     + " phone no, lenght should be nine";           
          }
        // validation for user Date of birth(dobDate)
         if (dobDate==null) {
            validationerror = validationerror + "\n" + "Please enter the Date of Birth";
        }
         if((dobDate!=null)&&(!dobDate.before(new Date())))
         {
             validationerror = validationerror + "\n" + "Please select DOB proper date";
         }
         
        // validation for Uemails
        if ((Uemails.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the email id";
        }
         
         // validation for insurcenCode
         
        if ((insurcenCode.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the Insurance Code";
         }
        if (!(insurcenCode.trim()).equals("") && !(insurcenCode.trim()).equals("null")
                && !((insurcenCode.trim()).matches("[a-zA-Z0-9]*"))) {
            validationerror = validationerror + "\n" + "Insurance Code should "
                    + "contain Alphabet and numbers only";
        }
        if((!(insurcenCode.trim()).equals("")) && (!(insurcenCode.trim().length()<10)))
          {
        validationerror = validationerror + "\n" + "Please enter the valid"
                                                     + " Insurance Code, lenght should be less than 10";           
          }
        
        //validation for insuranceLimit
        
        if ((insuranceLimit.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the Insurance Coverage limit";
        }
        if (!(insuranceLimit.trim()).equals("") && !(insuranceLimit.trim()).equals("null")
                && !((insuranceLimit.trim()).matches("[0-9]*"))) {
            validationerror = validationerror + "\n" + "Insurance Coverage limit should "
                    + "contain numbers only";
        }
        if((!(insuranceLimit.trim()).equals("")) && (!(insuranceLimit.trim().length()<10)))
          {
        validationerror = validationerror + "\n" + "Please enter the valid"
                                                     + " Insurance Coverage limit, lenght should be less than 10";           
          }
        
        // validation for userName
        if ((userName.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the User Name";
        }
        
        if (!(userName.trim()).equals("") && !(userName.trim()).equals("null")
                && !((userName.trim()).matches("[a-zA-Z0-9]*"))) {
            validationerror = validationerror + "\n" + "Insurance Code should "
                    + "contain Alphabet and numbers only";
        }
        
        if((!(userName.trim()).equals("")) && (!(userName.trim().length()<10)))
          {
        validationerror = validationerror + "\n" + "Please enter the valid"
                                                     + " Insurance Coverage limit, lenght should be less than 10";           
          }
        
        //validation for user password
        if ((uPassword.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the Password";
        }
        if((!(uPassword.trim()).equals("")) && (!(uPassword.trim().length()<10)))
          {
        validationerror = validationerror + "\n" + "Please enter the valid"
                                                     + " password, lenght should be less than 10";           
          }
        
        //validation for latitude
        if ((latitude.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the latitude";
        }
        if((!(latitude.trim()).equals("")) && (!(latitude.trim().length()<25)))
          {
        validationerror = validationerror + "\n" + "latitude value can not be more than 25, please enter valid number";           
          }
        
        
        //validation for longitude
        if ((longitude.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the longitude";
        }
        if((!(longitude.trim()).equals("")) && (!(longitude.trim().length()<25)))
          {
        validationerror = validationerror + "\n" + "longitude value can not be more than 25, please enter valid number";           
          }
        
        if (validationerror.equals("Please correct the following error:")) {
            validationerror = "Thanks for details";
            //JOptionPane.showMessageDialog(null, validationerror);
            return true;
        }
        else
        {
         JOptionPane.showMessageDialog(null, validationerror);
         return false;
        }
 
    }
    
      public Boolean searchForPerson(String currUserName)
    {
      PersonDirectory personDirectory= system.getPersonDirectory();
      for(Person personloop:personDirectory.getPersonList())
      {
       if(personloop.getUsername().equalsIgnoreCase(currUserName))
       {
          JOptionPane.showMessageDialog(null, "User Name already Present,Please select any other name");
          return false;
       }
      }
      return true;
    }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String firstName = fNametxt.getText().trim();
        String lastName = lNametxt.getText().trim();
        String gender = (String)selectGenderCombox.getSelectedItem();
        Date date1=selectDOBpicker.getDate();
        String userPhone=phoneNotxt.getText().trim();
        String Uemails=emailidtxt.getText().trim();
        String insurcenCode= insuranceCodeTxt.getText().trim();
        String insuranceCover=insuranceCoverLimitxt.getText().trim();
        String userName = userNameTxt.getText().trim();

        char[] passwordCharArray = userPassword.getPassword();
        String uPassword = String.valueOf(passwordCharArray);
        String latitude= locationLatiTxt.getText().trim();
        String longitude= locationLongTxt.getText().trim();

        SimpleDateFormat sdf1= new SimpleDateFormat("MM/dd/YYYY");

        boolean isUserInputValid=checkUserInput(firstName,lastName,date1,userPhone,Uemails,insurcenCode,insuranceCover,userName,uPassword,latitude,longitude);
        // search function to check whether user name present already

        if(isUserInputValid)
        {

            Boolean userinput=searchForPerson(userName);
            if(userinput)
            {
                // String userinsurance=hasinsurancetxt.getText();
                String dobText=sdf1.format(date1);
                int insuranceLimit=Integer.parseInt(insuranceCover);
                Person person= new Person();
                PersonDirectory pd=system.getPersonDirectory();
                System.out.println("person name-->"+person.getFirstName());

                pd.addPerson(person);
                person.setFirstName(firstName);
                person.setLastName(lastName);
                person.setGender(gender);
                person.setDob(dobText);
                person.setPhoneNo(userPhone);
                person.setEmailID(Uemails);
                //person.setHasInsurance(userinsurance);
                person.setInsuranceCode(insurcenCode);
                person.setInsuranceCoverageLimit(insuranceLimit);
                person.setUsername(userName);
                person.setPassword(uPassword);
                person.setLatitude(Double.parseDouble(latitude.trim()));
                person.setLongitude(Double.parseDouble(longitude.trim()));
                populatePersonTable();

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allPeronInfoTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JTextField emailidtxt;
    private javax.swing.JTextField fNametxt;
    private javax.swing.JTextField insuranceCodeTxt;
    private javax.swing.JTextField insuranceCoverLimitxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lNametxt;
    private javax.swing.JTextField locationLatiTxt;
    private javax.swing.JTextField locationLongTxt;
    private javax.swing.JTextField phoneNotxt;
    private javax.swing.JTextField searchNameTxt;
    private org.jdesktop.swingx.JXDatePicker selectDOBpicker;
    private javax.swing.JComboBox selectGenderCombox;
    private javax.swing.JTextField userNameTxt;
    private javax.swing.JPasswordField userPassword;
    // End of variables declaration//GEN-END:variables
}
