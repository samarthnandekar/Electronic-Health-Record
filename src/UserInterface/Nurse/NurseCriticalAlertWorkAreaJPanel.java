/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Nurse;

import Business.EcoSystem;
import Business.EnterPrise.AmbulanceEnterprise;
import Business.EnterPrise.Enterprise;
import Business.Network.Network;
import Business.Organization.AmbulanceReceptionistOrganization;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Person.Person;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.VitalAlertRequestToAmbulanceReception;
import Business.WorkQueue.VitalAlertTestRequestToNurse;
import Business.WorkQueue.WorkQueue;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author samar
 */
public class NurseCriticalAlertWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form NurseCriticalAlertWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount userAccount;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem ecoSystem;
    private NurseOrganization nurseOrganization;
    private Network network;

    public NurseCriticalAlertWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.ecoSystem = business;

        if (organization instanceof NurseOrganization) {
            nurseOrganization = (NurseOrganization) organization;
        }
        populateAlertRequestCombobox();
        populateCriticalAlertRequest();
        populateCriticalAlertRequestTable("Sent to Ambulance Receptionist");
        populateAlertRequestTable("Sent to Nurse");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        criticalAlertRequestTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        respRateTxt1 = new javax.swing.JTextField();
        heartRateTxt1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        viewBtn2 = new javax.swing.JButton();
        sysBloodPresTxt1 = new javax.swing.JTextField();
        weightInPoundsTxt1 = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        alertRequestTable = new javax.swing.JTable();
        alertRequestCombo = new javax.swing.JComboBox();
        notifyNextLevelBtn = new javax.swing.JButton();
        viewBtn1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        respRateTxt = new javax.swing.JTextField();
        heartRateTxt = new javax.swing.JTextField();
        sysBloodPresTxt = new javax.swing.JTextField();
        weightInPoundsTxt = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        crtiticalAlertCombox = new javax.swing.JComboBox();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Nurse Critical Alert WorkArea ");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 20, -1, -1));

        criticalAlertRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Requested Date", "Message", "PatientMRN", "Status", "Ambulance Receptionist", "Receiver Date", "Ambulance Assistant", "Ambulance Recep Request Date"
            }
        ));
        jScrollPane2.setViewportView(criticalAlertRequestTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 123, 1190, 90));

        jLabel6.setText("Respiratory Rate:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 273, 120, -1));

        jLabel7.setText("Heart Rate:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(222, 313, 100, -1));

        jLabel8.setText("Systolic blood Pressure:");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(582, 273, 140, -1));

        jLabel9.setText("Weight in Pounds:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(582, 323, 110, -1));

        respRateTxt1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respRateTxt1ActionPerformed(evt);
            }
        });
        add(respRateTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(412, 273, 120, -1));
        add(heartRateTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(412, 313, 120, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Critical Alert Work Request from Patient, based on Vital Sign:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 103, -1, -1));

        viewBtn2.setText("View");
        viewBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtn2ActionPerformed(evt);
            }
        });
        add(viewBtn2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 390, 90, 35));
        add(sysBloodPresTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(837, 273, 120, -1));
        add(weightInPoundsTxt1, new org.netbeans.lib.awtextra.AbsoluteConstraints(837, 323, 120, -1));

        alertRequestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Requested Date", "Message", "PatientMRN", "status", "Receiver Nurse", "Nurse Rece Date", "Ambulance Receptionist", "Ambulance Recep Request Date", "Ambulance Assistant", "Ambulance Assistant Date"
            }
        ));
        jScrollPane3.setViewportView(alertRequestTable);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 510, 1180, 90));

        alertRequestCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        alertRequestCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alertRequestComboActionPerformed(evt);
            }
        });
        add(alertRequestCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 470, 210, 35));

        notifyNextLevelBtn.setText("Notify to Next Level");
        notifyNextLevelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notifyNextLevelBtnActionPerformed(evt);
            }
        });
        add(notifyNextLevelBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 780, 150, 35));

        viewBtn1.setText("View");
        viewBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtn1ActionPerformed(evt);
            }
        });
        add(viewBtn1, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 780, 90, 35));

        jLabel11.setText("Respiratory Rate:");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 660, 120, -1));

        jLabel12.setText("Heart Rate:");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 700, 100, -1));

        jLabel13.setText("Systolic blood Pressure:");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 660, 140, -1));

        jLabel14.setText("Weight in Pounds:");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 710, 110, -1));

        respRateTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                respRateTxtActionPerformed(evt);
            }
        });
        add(respRateTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 660, 120, -1));
        add(heartRateTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 700, 120, -1));
        add(sysBloodPresTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 660, 120, -1));
        add(weightInPoundsTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 710, 120, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Alert Work Request from Patient, based on Vital Sign:");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 480, -1, -1));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 810, -1, 35));

        crtiticalAlertCombox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        crtiticalAlertCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crtiticalAlertComboxActionPerformed(evt);
            }
        });
        add(crtiticalAlertCombox, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 70, 230, 35));
    }// </editor-fold>//GEN-END:initComponents

    public void populateCriticalAlertRequest() {
        crtiticalAlertCombox.removeAllItems();
        crtiticalAlertCombox.addItem("Sent to Ambulance Receptionist");
        crtiticalAlertCombox.addItem("Sent to Ambulance Assistant");
        crtiticalAlertCombox.addItem("Accepted by Ambulance Assistants");
    }

    public void populateAlertRequestCombobox() {
        alertRequestCombo.removeAllItems();
        alertRequestCombo.addItem("Sent to Nurse");
        alertRequestCombo.addItem("Sent to Ambulance Receptionist");
        alertRequestCombo.addItem("Sent to Ambulance Assistant");
        alertRequestCombo.addItem("Accepted by Ambulance Assistants");

    }

    public void populateCriticalAlertRequestTable(String requestStatus) {
        DefaultTableModel model = (DefaultTableModel) criticalAlertRequestTable.getModel();

        model.setRowCount(0);
        WorkQueue workQueue = nurseOrganization.getWorkQueue();
        System.out.println("workQueue.getWorkRequestList() size-->" + workQueue.getWorkRequestList().size());
        for (WorkRequest request : workQueue.getWorkRequestList()) {
            if (request instanceof VitalAlertRequestToAmbulanceReception) {
                VitalAlertRequestToAmbulanceReception vARTAbmuRecep = (VitalAlertRequestToAmbulanceReception) request;
                System.out.println("workQueue.getWorkRequestList() size--1111-->" + workQueue.getWorkRequestList().size());
                if (requestStatus.equals(vARTAbmuRecep.getStatus())) {
                    System.out.println("workQueue.getWorkRequestList() size--222-->" + workQueue.getWorkRequestList().size());
                    Object[] row = new Object[13];
                    row[0] = vARTAbmuRecep;
                    Date date = vARTAbmuRecep.getRequestDate();
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/YYYY HH:mm:ss");
                    String dateinStr = simpleDateFormat.format(date);
                    row[1] = dateinStr;
                    row[2] = vARTAbmuRecep.getMessage();

                    Person patienttemp = vARTAbmuRecep.getSender();
                    Patient patient = (Patient) patienttemp;
                    row[3] = patient.getMrn();
                    row[4] = vARTAbmuRecep.getStatus();
                    if (vARTAbmuRecep.getReceiver() != null) {
                        row[5] = vARTAbmuRecep.getReceiver().getEmployee().getFirstName() + " " + vARTAbmuRecep.getReceiver().getEmployee().getLastName();
                        row[6] = simpleDateFormat.format(vARTAbmuRecep.getResolveDate());
                    }

                    row[7] = vARTAbmuRecep.getSecondReceiver();

                    if (vARTAbmuRecep.getSecondReceiverDate() != null) {
                        Date dateSecond = vARTAbmuRecep.getSecondReceiverDate();
                        SimpleDateFormat simpleDateFormatSeconnd = new SimpleDateFormat("MM/dd/YYYY HH:mm:ss");
                        row[8] = simpleDateFormatSeconnd.format(dateSecond);
                    }

                    model.addRow(row);
                }

            }
        }
    }

    public void populateAlertRequestTable(String requestStatus) {
        DefaultTableModel model = (DefaultTableModel) alertRequestTable.getModel();

        model.setRowCount(0);
        WorkQueue workQueue = nurseOrganization.getWorkQueue();
        for (WorkRequest request : workQueue.getWorkRequestList()) {
            if (request instanceof VitalAlertTestRequestToNurse) {
                VitalAlertTestRequestToNurse vATRTNurse = (VitalAlertTestRequestToNurse) request;

                if (requestStatus.equals(vATRTNurse.getStatus())) {
                    Object[] row = new Object[13];
                    row[0] = vATRTNurse;
                    Date date = vATRTNurse.getRequestDate();
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/YYYY HH:mm:ss");
                    String dateinStr = simpleDateFormat.format(date);
                    row[1] = dateinStr;
                    row[2] = vATRTNurse.getMessage();

                    Person patienttemp = vATRTNurse.getSender();
                    Patient patient = (Patient) patienttemp;
                    row[3] = patient.getMrn();
                    row[4] = vATRTNurse.getStatus();
                    if (vATRTNurse.getReceiver() != null) {
                        row[5] = vATRTNurse.getReceiver().getEmployee().getFirstName() + " " + vATRTNurse.getReceiver().getEmployee().getLastName();
                        row[6] = simpleDateFormat.format(vATRTNurse.getResolveDate());
                    }

                    row[7] = vATRTNurse.getSecondReceiver();

                    if (vATRTNurse.getSecondReceiverDate() != null) {
                        Date dateSecond = vATRTNurse.getSecondReceiverDate();
                        SimpleDateFormat simpleDateFormatSeconnd = new SimpleDateFormat("MM/dd/YYYY HH:mm:ss");
                        row[8] = simpleDateFormatSeconnd.format(dateSecond);
                    }
                    row[9] = vATRTNurse.getThirdReceiver();

                    if (vATRTNurse.getThirdReceiverDate() != null) {
                        Date dateThird = vATRTNurse.getSecondReceiverDate();
                        SimpleDateFormat simpleDateFormatThird = new SimpleDateFormat("MM/dd/YYYY HH:mm:ss");
                        row[10] = simpleDateFormatThird.format(dateThird);
                    }

                    model.addRow(row);
                }

            }
        }
    }

    // for critical work request
    private void respRateTxt1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respRateTxt1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_respRateTxt1ActionPerformed

    // for critical work request
    private void viewBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtn2ActionPerformed

        int selectedRow = criticalAlertRequestTable.getSelectedRow();
        if (selectedRow >= 0) {
            VitalAlertRequestToAmbulanceReception vATRTN = (VitalAlertRequestToAmbulanceReception) criticalAlertRequestTable.getValueAt(selectedRow, 0);
            respRateTxt1.setText(String.valueOf(vATRTN.getVitalSign().getRespiratoryRate()));
            heartRateTxt1.setText(String.valueOf(vATRTN.getVitalSign().getHeartRate()));
            sysBloodPresTxt1.setText(String.valueOf(vATRTN.getVitalSign().getBloodPressure()));
            weightInPoundsTxt1.setText(String.valueOf(vATRTN.getVitalSign().getWeight()));

        } else {
            JOptionPane.showMessageDialog(null, "Please select the request first");
        }
    }//GEN-LAST:event_viewBtn2ActionPerformed

    // for normal work Request
    private void alertRequestComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alertRequestComboActionPerformed
        String requestStatus = (String) alertRequestCombo.getSelectedItem();
        System.out.println("requestStatus-->" + requestStatus);
        // below if condition to save from null value
        if (requestStatus != null) {
            if (requestStatus.equals("Sent to Nurse")) {
                notifyNextLevelBtn.setVisible(true);
            } else {
                notifyNextLevelBtn.setVisible(false);
            }
            if (requestStatus != null) {
                populateAlertRequestTable(requestStatus);
                clearText();
            }
        }
    }//GEN-LAST:event_alertRequestComboActionPerformed

    public void clearText() {
        respRateTxt.setText("");
        heartRateTxt.setText("");
        sysBloodPresTxt.setText("");
        weightInPoundsTxt.setText("");
    }

     public void clearTextCritical() {
        respRateTxt1.setText("");
        heartRateTxt1.setText("");
        sysBloodPresTxt1.setText("");
        weightInPoundsTxt1.setText("");
    }

    private void notifyNextLevelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notifyNextLevelBtnActionPerformed

        int selectedRow = alertRequestTable.getSelectedRow();
        if (selectedRow >= 0) {
            VitalAlertTestRequestToNurse vATRTN = (VitalAlertTestRequestToNurse) alertRequestTable.getValueAt(selectedRow, 0);
            Organization org = null;
            for (Network tempNetwork : ecoSystem.getNetworkList().getNetworkList()) {
                for (Enterprise checkEnterprise : tempNetwork.getEnterpriseDirectory().getEnterPriseList()) {
                    if (checkEnterprise.getOrgName().equals(enterprise.getOrgName())) {
                        network = tempNetwork;
                        System.out.println("enterprise name-->" + checkEnterprise.getOrgName());
                    }
                }
            }

            System.out.println("network name-->" + network.getName());
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterPriseList()) {
                if (enterprise instanceof AmbulanceEnterprise) {
                    System.out.println("enterprise name==>" + enterprise.getOrgName());
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof AmbulanceReceptionistOrganization) {
                            org = organization;
                        }
                    }

                }
            }
            if (org != null) {
                System.out.println("--- in side the generateVisitPaymentRequest3333 ------------ ");
                Date date = new Date();
                vATRTN.setResolveDate(date);
                vATRTN.setReceiver(userAccount);
                vATRTN.setStatus("Sent to Ambulance Receptionist");
                org.getWorkQueue().getWorkRequestList().add(vATRTN);
                JOptionPane.showMessageDialog(null, "Request Sent to Ambulance Receptionist");
                //userAccount.getWorkQueue().getWorkRequestList().add(cVCWR);

                System.out.println("workQueue.getWorkRequestList().size()-->" + org.getWorkQueue().getWorkRequestList().size());
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select the request first");
        }
    }//GEN-LAST:event_notifyNextLevelBtnActionPerformed

    private void viewBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtn1ActionPerformed

        int selectedRow = alertRequestTable.getSelectedRow();
        if (selectedRow >= 0) {
            VitalAlertTestRequestToNurse vATRTN = (VitalAlertTestRequestToNurse) alertRequestTable.getValueAt(selectedRow, 0);
            respRateTxt.setText(String.valueOf(vATRTN.getVitalSign().getRespiratoryRate()));
            heartRateTxt.setText(String.valueOf(vATRTN.getVitalSign().getHeartRate()));
            sysBloodPresTxt.setText(String.valueOf(vATRTN.getVitalSign().getBloodPressure()));
            weightInPoundsTxt.setText(String.valueOf(vATRTN.getVitalSign().getWeight()));

        } else {
            JOptionPane.showMessageDialog(null, "Please select the request first");
        }
    }//GEN-LAST:event_viewBtn1ActionPerformed

    private void respRateTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_respRateTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_respRateTxtActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void crtiticalAlertComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crtiticalAlertComboxActionPerformed

        String requestStatus = (String) crtiticalAlertCombox.getSelectedItem();
        System.out.println("requestStatus-->" + requestStatus);
        // below if condition to save from null value
        if (requestStatus != null) {
            if (requestStatus != null) {
                populateCriticalAlertRequestTable(requestStatus);
                clearTextCritical();
            }
        }
    }//GEN-LAST:event_crtiticalAlertComboxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox alertRequestCombo;
    private javax.swing.JTable alertRequestTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JTable criticalAlertRequestTable;
    private javax.swing.JComboBox crtiticalAlertCombox;
    private javax.swing.JTextField heartRateTxt;
    private javax.swing.JTextField heartRateTxt1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton notifyNextLevelBtn;
    private javax.swing.JTextField respRateTxt;
    private javax.swing.JTextField respRateTxt1;
    private javax.swing.JTextField sysBloodPresTxt;
    private javax.swing.JTextField sysBloodPresTxt1;
    private javax.swing.JButton viewBtn1;
    private javax.swing.JButton viewBtn2;
    private javax.swing.JTextField weightInPoundsTxt;
    private javax.swing.JTextField weightInPoundsTxt1;
    // End of variables declaration//GEN-END:variables
}
