/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SystemAdminWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.EnterPrise.Enterprise;
import Business.Network.Network;
import Business.Role.AdminRole;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samarth
 */
public class ManageEnterpriseAdminJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageEnterpriseAdminJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;

    public ManageEnterpriseAdminJPanel(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        populateTable();
        populateNetworkComboBox();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) enterpriseJTable.getModel();

        model.setRowCount(0);
        for (Network network : system.getNetworkList().getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterPriseList()) {
                for (UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList()) {
                    Object[] row = new Object[3];
                    row[0] = enterprise.getOrgName();
                    row[1] = network.getName();
                    row[2] = userAccount.getUsername();

                    model.addRow(row);
                }
            }
        }
    }

    private void populateNetworkComboBox(){
        networkJComboBox.removeAllItems();
        
        for (Network network : system.getNetworkList().getNetworkList()){
            networkJComboBox.addItem(network);
        }
    }
    
    private void populateEnterpriseComboBox(Network network){
        enterpriseJComboBox.removeAllItems();
        
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterPriseList()){
            enterpriseJComboBox.addItem(enterprise);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        nameJTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        enterpriseJTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        passwordJPasswordField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        networkJComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        usernameJTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        enterpriseJComboBox = new javax.swing.JComboBox();
        submitJButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setText("Password");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 510, -1, -1));
        add(nameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 570, 136, 35));

        enterpriseJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Enterprise Name", "Network", "Username"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(enterpriseJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 130, 523, 95));

        jLabel5.setText("Name");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 580, -1, -1));
        add(passwordJPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 500, 134, 35));

        jLabel1.setText("Network");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 290, -1, -1));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 750, 100, 35));

        networkJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        networkJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkJComboBoxActionPerformed(evt);
            }
        });
        add(networkJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 280, 136, 35));

        jLabel2.setText("Username");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 440, -1, -1));
        add(usernameJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 430, 136, 35));

        jLabel3.setText("Enterprise");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 360, -1, -1));

        enterpriseJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(enterpriseJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 360, 136, 35));

        submitJButton.setText("Submit");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });
        add(submitJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 670, 100, 35));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setText("Set User name and Password");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SystemAdminWorkAreaJPanel sysAdminwjp = (SystemAdminWorkAreaJPanel) component;
        sysAdminwjp.populateTree();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void networkJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkJComboBoxActionPerformed

        Network network = (Network) networkJComboBox.getSelectedItem();
        if (network != null){
            populateEnterpriseComboBox(network);
        }

    }//GEN-LAST:event_networkJComboBoxActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

        String password = String.valueOf(passwordJPasswordField.getPassword());
        String name = nameJTextField.getText().trim();
        String username = usernameJTextField.getText().trim();
        
        boolean isValidInput=checkuserInput(username.trim(),password,name);
        //check the user Input Data
        if(isValidInput )
        {
        Enterprise enterprise = (Enterprise) enterpriseJComboBox.getSelectedItem();
        Network network=(Network)networkJComboBox.getSelectedItem();
        boolean isNamePresent=checkUserNameInDir(network,enterprise,username);
       
        if(isNamePresent)
        {
        Employee emp= new Employee(name);
        Employee employee = enterprise.getEmployeeDirectory().addEmployee(emp);
        UserAccount ua=new UserAccount(username, password.trim(), employee, new AdminRole());
        UserAccount account = enterprise.getUserAccountDirectory().addUserAccount(ua);
        usernameJTextField.setText("");
        passwordJPasswordField.setText("");
        nameJTextField.setText("");
        populateTable();    
        }
         
        }
        

    }//GEN-LAST:event_submitJButtonActionPerformed

    public boolean checkUserNameInDir(Network network,Enterprise enterprise,String username)
    {
        for(UserAccount userAccount:enterprise.getUserAccountDirectory().getUserAccountList())
        {
           if(userAccount.getUsername().equals(username))
           {
            JOptionPane.showMessageDialog(null, "User Name already Present, please enter any other userName");
            return false;
           }
        }
        return true;
    }
    
    
    public boolean checkuserInput(String userName,String password,String name)
    {
        
        String validationerror = "Please correct the following error:";
       // validation for userName
        if ((userName.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the User Name";
        }
        
        if (!(userName.trim()).equals("") && !(userName.trim()).equals("null")
                && !((userName.trim()).matches("[a-zA-Z0-9]*"))) {
            validationerror = validationerror + "\n" + "userName should "
                    + "contain Alphabet and numbers only";
        }
        
        
        if((!(userName.trim()).equals("")) && (!(userName.trim().length()<10)))
          {
        validationerror = validationerror + "\n" + " userName, lenght should be less than 10";           
          }
        
        // validation for password
        if ((password.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the password";
        }
        
        if (!(password.trim()).equals("") && !(password.trim()).equals("null")
                && !((password.trim()).matches("[a-zA-Z0-9]*"))) {
            validationerror = validationerror + "\n" + "password should "
                    + "contain Alphabet and numbers only";
        }
        
        
        if((!(password.trim()).equals("")) && (!(password.trim().length()<10)))
          {
        validationerror = validationerror + "\n" + " password lenght should be less than 10";           
          }
        
        // validation for name
        if ((name.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the Name";
        }
        
        if (!(name.trim()).equals("") && !(name.trim()).equals("null")
                && !((name.trim()).matches("[a-zA-Z0-9]*"))) {
            validationerror = validationerror + "\n" + "name should "
                    + "contain Alphabet and numbers only";
        }
        
        
        if((!(name.trim()).equals("")) && (!(name.trim().length()<10)))
          {
        validationerror = validationerror + "\n" + " name lenght should be less than 10";           
          }
     
        
        if (validationerror.equals("Please correct the following error:")) {
            validationerror = "Thanks for details";
            //JOptionPane.showMessageDialog(null, validationerror);
            return true;
        }
        else
        {
         JOptionPane.showMessageDialog(null, validationerror);
         return false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JComboBox enterpriseJComboBox;
    private javax.swing.JTable enterpriseJTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameJTextField;
    private javax.swing.JComboBox networkJComboBox;
    private javax.swing.JPasswordField passwordJPasswordField;
    private javax.swing.JButton submitJButton;
    private javax.swing.JTextField usernameJTextField;
    // End of variables declaration//GEN-END:variables
}
