/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Receptionist;

import Business.Doctor.Appointment;
import Business.Doctor.AppointmentDirectory;
import Business.Doctor.Doctor;
import Business.Doctor.DoctorDepartment;
import Business.EcoSystem;
import Business.EnterPrise.Enterprise;
import Business.EnterPrise.HospitalEnterprise;
import Business.Help.HMailSentNotification;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Patient.PatientDirectory;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import Business.Role.PatientRole;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samarth
 */
public class ScheduleAppointmentJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ScheduleAppointmentJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem system;
    private Enterprise enterprise;
    private Organization organization;
    private Doctor currDoctor;

    public ScheduleAppointmentJPanel(JPanel upc, Organization organization, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        userProcessContainer = upc;
        system = ecoSystem;
        this.enterprise = enterprise;
        this.organization = organization;
        populatePersonTable();
        populateDocDepartmentCoboBox();
    }

    public void populateDocDepartmentCoboBox() {
        docDepartmentcomBox.removeAllItems();
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof DoctorOrganization) {
                DoctorOrganization currdocDoctorOrganization = (DoctorOrganization) organization;
                for (DoctorDepartment doctorDepartment : currdocDoctorOrganization.getDoctorDepartmentCatalog().getDoctorDepartmentCatalog()) {
                    docDepartmentcomBox.addItem(doctorDepartment);
                }
            }
        }
    }

    public void populatePersonTable() {
        DefaultTableModel model = (DefaultTableModel) allPatientInfoTable.getModel();
        model.setRowCount(0);
        for (Person person : system.getPersonDirectory().getPersonList()) {
            Object[] row = new Object[11];
            row[0] = person;
            row[1] = person.getLastName();
            row[2] = person.getDob();
            row[3] = person.getGender();
            row[4] = person.getPhoneNo();
            row[5] = person.getEmailID();
            row[6] = person.getInsuranceCode();
            row[7] = person.getInsuranceCoverageLimit();
            row[8] = person.getUsername();
            row[9] = person.getPersonID();

            //row[1] = employee.getFirstName();
            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        allPatientInfoTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        docDepartmentcomBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        selectDocCombox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        docAppoinmentDetailsTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        selectDateJPicker = new org.jdesktop.swingx.JXDatePicker();
        searchTxt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 840, 100, 35));

        allPatientInfoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "last Name", "Date of Birth", "Gender", "Phone No", "Email ID", "insurance Code", "insurance Limit", "User Name", "Person ID"
            }
        ));
        jScrollPane1.setViewportView(allPatientInfoTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, 1070, 88));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Person Details:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, -1, -1));

        docDepartmentcomBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        docDepartmentcomBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docDepartmentcomBoxActionPerformed(evt);
            }
        });
        add(docDepartmentcomBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 370, 173, 30));

        jLabel2.setText("Select Department:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 380, -1, -1));

        jLabel3.setText("Select Doctor:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 460, -1, -1));

        selectDocCombox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        selectDocCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDocComboxActionPerformed(evt);
            }
        });
        add(selectDocCombox, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 450, 160, 30));

        docAppoinmentDetailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(docAppoinmentDetailsTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 610, 650, 88));

        jButton1.setText("Confirm Appointment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 730, 170, 35));

        jLabel4.setText("Select Date:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 540, -1, -1));

        selectDateJPicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDateJPickerActionPerformed(evt);
            }
        });
        add(selectDateJPicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 530, -1, -1));
        add(searchTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 260, 130, 30));

        jButton2.setText("View All Records");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 260, 160, 35));

        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 260, 100, 35));

        jButton4.setText("Cancel Appoinment");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 730, 170, 35));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Appointment Schedule");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void docDepartmentcomBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docDepartmentcomBoxActionPerformed
        DoctorDepartment doctorDepartment = (DoctorDepartment) docDepartmentcomBox.getSelectedItem();
        if (doctorDepartment != null) {
            populateDoctorList(doctorDepartment);
        }
    }//GEN-LAST:event_docDepartmentcomBoxActionPerformed

    private void selectDocComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDocComboxActionPerformed
        currDoctor = (Doctor) selectDocCombox.getSelectedItem();
        if (currDoctor != null) {
            populateDocAppointmentDateList(currDoctor);
        }
    }//GEN-LAST:event_selectDocComboxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Date date = selectDateJPicker.getDate();
        Date todayDate = new Date();

        if (date != null) {

            long time = date.getTime();
            long todattime = todayDate.getTime();
            if (time - todattime < 0) {
                JOptionPane.showMessageDialog(null, "Can not take appoinment,please select future date");
            } else {
                int selectedRow = docAppoinmentDetailsTable.getSelectedRow();

                if (selectedRow >= 0) {
                    int selectedRowPerson = allPatientInfoTable.getSelectedRow();

                    if (selectedRowPerson >= 0) {
                        Appointment appointment = (Appointment) docAppoinmentDetailsTable.getValueAt(selectedRow, 0);

                        if (!appointment.getAppointmentStatus().getValue().equals("Open")) {
                            System.out.println("===inside if=====");
                            JOptionPane.showMessageDialog(null, "Appointment Status is not open");
                            return;
                        }
                        Person person = (Person) allPatientInfoTable.getValueAt(selectedRowPerson, 0);

                        // Check whether patient is present in hospital patient dir or not
                        Patient patient = searchUserAccount(person);
                        if (patient == null) {
                            System.out.println("---inside new creation------");
                            // will create patient profile in hospital patient dir
                            patient = addandCreatePatient(person);

                        }
                        // code to check, is patient has same doc appointment for today 
                        boolean isValidPatient = checkPatientAppointmentDir(patient, appointment);
                        if (isValidPatient) {
                            
                            try{
                            patient.getAppointmentDirectory().addAppointment(appointment);
                            appointment.setAppointmentStatus(Appointment.AppointmentStatus.Booked);
                            appointment.setPatient(patient);
                            JOptionPane.showMessageDialog(null, "Appointment Confirmed");
                            System.out.println("============successs==================111=");
                            // code to send email
                            String message = "Hi  " + person.getFirstName()+ ","
                                    + "\n"
                                    + "\n"
                                    + "Please find the appointment confirmation details below"
                                    + "\n"
                                    + "\n"
                                    + "Doctor Name:-" + appointment.getDoctor()
                                    + "\n"
                                    + "Time Slot:-"+appointment.getTimeSlot()
                                    + "\n"
                                    + "Date :-"+appointment.getDate()
                                    + "\n"
                                    + "\n"
                                    + "Please user the below Username and Password"
                                    + "\n"
                                    + "UserName:- " + "sam" + person.getPassword()+"\n"
                                    + "Password:- " + "sam" + person.getUsername()+ "\n"
                                    + "\n"
                                    + "\n"
                                    + "Thanks" +"\n"
                                    + enterprise.getOrgName();

                            String[] to = {"samarthnandekar@gmail.com"};
                            System.out.println("============successs==================222=");
                            boolean mailchecking = HMailSentNotification.sendMail(message, to);
                            if (mailchecking) {
                                System.out.println("success");
                                System.out.println("============successs==================3333=");
                            } else {
                                System.out.println("failed, error in emailID.");
                            }

                            String strDate = appointment.getDate();
                            populateAppintmentTable(strDate);
                            }
                            catch(Exception ex)
                            {
                                System.out.println(" Exception in maail send");
                            }
                            
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Please select patient");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please select Appointment");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select Date");
        }

    }//GEN-LAST:event_jButton1ActionPerformed
// code to check, is patient has same doc appointment for today 

    public boolean checkPatientAppointmentDir(Patient selectpatient, Appointment currAppointment) {
        System.out.println("select selectpatient--->" + selectpatient.getMrn());
        System.out.println("select selectpatient--->" + selectpatient.getUsername());
        System.out.println("selectpatient.getAppointmentDirectory().getAppointmentList()-->" + selectpatient.getAppointmentDirectory().getAppointmentList().size());
        for (Appointment appointment : selectpatient.getAppointmentDirectory().getAppointmentList()) {
            if (appointment.getDate().equals(currAppointment.getDate())) {
                JOptionPane.showMessageDialog(null, "Patient has already booked an appointment for for today, with same doctor ");
                return false;

            }
        }
        return true;
    }

    // function to check whether patient profile is present in patient dir or not
    public Patient searchUserAccount(Person person) {
        System.out.println("person name-  in search-->" + person.getPersonID());
        System.out.println("perosn name--->" + person.getUsername());
        if (enterprise instanceof HospitalEnterprise) {
            HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) enterprise;
            for (Patient patient : hospitalEnterprise.getPatientDirectory().getPatientList()) {
                System.out.println("Uer Account name====" + patient.getUsername());
                if (!(patient == null)) {
                    System.out.println("in search user Accoiunt-->" + patient.getPersonID());
                    System.out.println("in search user Accoiunt-->" + person.getPersonID());
                    if (person.getUsername().equals(patient.getUsername())) {
                        System.out.println("patient retunt name===>" + patient.getUsername());
                        return patient;

                    }

                }

            }

        }
        return null;
    }


    private void selectDateJPickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDateJPickerActionPerformed

        Date date = selectDateJPicker.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/YYYY");
        String strDate = sdf.format(date);
        System.out.println("strDate-->" + strDate);
        Date todayDate = new Date();
        long time = date.getTime();
        long todattime = todayDate.getTime();
        System.out.println("time differ--->" + (time - todattime));

        //String strdate = (String) docAppointmentDateCombox.getSelectedItem();
        if (strDate != null) {
            populateAppintmentTable(strDate);
        }
    }//GEN-LAST:event_selectDateJPickerActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String strSearchName = searchTxt.getText();

        if (!strSearchName.equals("")) {

            DefaultTableModel model = (DefaultTableModel) allPatientInfoTable.getModel();
            model.setRowCount(0);

            PersonDirectory pd = system.getPersonDirectory();
            for (Person person : pd.getPersonList()) {
                if (person.getUsername().equals(strSearchName)) {
                    Object[] row = new Object[11];
                    row[0] = person;
                    row[1] = person.getLastName();
                    row[2] = person.getDob();
                    row[3] = person.getGender();
                    row[4] = person.getPhoneNo();
                    row[5] = person.getEmailID();
                    row[6] = person.getInsuranceCode();
                    row[7] = person.getInsuranceCoverageLimit();
                    row[8] = person.getUsername();
                    row[9] = person.getPersonID();

                    //row[1] = employee.getFirstName();
                    model.addRow(row);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please enter person first Name");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        populatePersonTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        Date date = selectDateJPicker.getDate();
        Date todayDate = new Date();

        if (date != null) {

            long time = date.getTime();
            long todattime = todayDate.getTime();
            if (time - todattime < 0) {
                JOptionPane.showMessageDialog(null, "Can not take appoinment,please select future date");
            } else {
                int selectedRow = docAppoinmentDetailsTable.getSelectedRow();

                if (selectedRow >= 0) {
                    int selectedRowPerson = allPatientInfoTable.getSelectedRow();

                    if (selectedRowPerson >= 0) {
                        Appointment appointment = (Appointment) docAppoinmentDetailsTable.getValueAt(selectedRow, 0);

                        if (!appointment.getAppointmentStatus().getValue().equals("Booked")) {
                            System.out.println("===inside if=====");
                            JOptionPane.showMessageDialog(null, "Appointment Status is not open");
                            return;
                        }
                        Person person = (Person) allPatientInfoTable.getValueAt(selectedRowPerson, 0);

                        Patient slectpatient = searchUserAccount(person);
                        if (slectpatient == null) {
                            System.out.println("---inside new creation------");
                            slectpatient = addandCreatePatient(person);
                        }
                        boolean isValidPatient = checkPatientAppointmentDir(slectpatient, appointment);
                        if (isValidPatient) {
                            slectpatient.getAppointmentDirectory().addAppointment(appointment);
                            appointment.setAppointmentStatus(Appointment.AppointmentStatus.Open);
                            appointment.setPatient(slectpatient);
                            JOptionPane.showMessageDialog(null, "Appointment Canceled");
                            String strDate = appointment.getDate();
                            populateAppintmentTable(strDate);
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "Please select patient");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Please select Appointment");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select Date");
        }


    }//GEN-LAST:event_jButton4ActionPerformed

    public Patient addandCreatePatient(Person person) {
        UserAccount userAccount = new UserAccount();

        System.out.println("======inside the user Account creation====");

        Patient patient = new Patient();
        System.out.println("=====" + patient.getMrn());
        patient.setFirstName(person.getFirstName());
        patient.setLastName(person.getLastName());
        patient.setGender(person.getGender());
        patient.setPhoneNo(person.getPhoneNo());
        patient.setEmailID(person.getEmailID());
        patient.setDob(person.getDob());
        patient.setInsuranceCode(person.getInsuranceCode());
        patient.setInsuranceCoverageLimit(person.getInsuranceCoverageLimit());

        patient.setUsername(person.getUsername());
        patient.setPassword(person.getPassword());
        patient.setPersonID(person.getPersonID());
        System.out.println("patient MRn number-->" + patient.getMrn());
        userAccount.setPatient(patient);
        userAccount.setPassword("sam" + person.getPassword());
        userAccount.setUsername("sam" + person.getUsername());
        userAccount.setRole(new PatientRole());
        if (enterprise instanceof HospitalEnterprise) {
            HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) enterprise;
            PatientDirectory pd = hospitalEnterprise.getPatientDirectory();
            pd.addpatPatient(patient);
            UserAccountDirectory uad = hospitalEnterprise.getUserAccountDirectory();
            uad.addUserAccount(userAccount);
        }
        return patient;
    }

    private void populateAppintmentTable(String strdate) {

        DefaultTableModel model = (DefaultTableModel) docAppoinmentDetailsTable.getModel();
        model.setRowCount(0);
        for (Appointment appointment : currDoctor.getAppointmentList().getAppointmentList()) {
            if ((appointment.getDate()).equals(strdate)) {
                Object[] row = new Object[5];
                row[0] = appointment;
                row[1] = appointment.getTimeSlot();
                row[2] = appointment.getAppointmentStatus();
                row[3] = appointment.getPatient();
                model.addRow(row);
            }
        }
    }

    public void populateDocAppointmentDateList(Doctor doctor) {
        System.out.println("----- inside populateAppointmentDateComboBox-----");
        //docAppointmentDateCombox.removeAllItems();
        List<String> uniqueAppointment = new ArrayList<>();
        AppointmentDirectory appointmentDirectory = doctor.getAppointmentList();
        if (appointmentDirectory.getAppointmentList() != null) {
            System.out.println("----1.2-  inside----------");
            for (Appointment appointment : appointmentDirectory.getAppointmentList()) {
                uniqueAppointment.add(appointment.getDate());
                // AppointmentDateJComboBox.addItem(appointment);
                System.out.println("----1.3 inside-----------");
            }
            LinkedHashSet<String> tempAppointmentList = new LinkedHashSet<String>();
            tempAppointmentList.addAll(uniqueAppointment);
            uniqueAppointment.clear();
            uniqueAppointment.addAll(tempAppointmentList);
            for (int i = 0; i < uniqueAppointment.size(); i++) {
                //docAppointmentDateCombox.addItem(uniqueAppointment.get(i));
                System.out.println("value inside the for loop-->" + uniqueAppointment.get(i));
            }
        }
    }

    public void populateDoctorList(DoctorDepartment doctorDepartment) {
        selectDocCombox.removeAllItems();
        for (Doctor doctor : doctorDepartment.getDoctorDirectory().getDoctorList()) {
            selectDocCombox.addItem(doctor);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allPatientInfoTable;
    private javax.swing.JButton backJButton;
    private javax.swing.JTable docAppoinmentDetailsTable;
    private javax.swing.JComboBox docDepartmentcomBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField searchTxt;
    private org.jdesktop.swingx.JXDatePicker selectDateJPicker;
    private javax.swing.JComboBox selectDocCombox;
    // End of variables declaration//GEN-END:variables
}
