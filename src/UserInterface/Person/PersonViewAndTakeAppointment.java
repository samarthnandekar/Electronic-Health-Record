/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Person;

import Business.Doctor.Appointment;
import Business.Doctor.Doctor;
import Business.Doctor.DoctorDepartment;
import Business.EcoSystem;
import Business.EnterPrise.Enterprise;
import Business.EnterPrise.HospitalEnterprise;
import Business.Help.HMailSentNotification;
import Business.Network.Network;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.Patient.Patient;
import Business.Patient.PatientDirectory;
import Business.Person.Person;
import Business.Role.PatientRole;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.BorderLayout;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author samar
 */
public class PersonViewAndTakeAppointment extends javax.swing.JPanel {

    /**
     * Creates new form PersonViewAndTakeAppointment
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Person person;
    private EcoSystem ecoSystem;

    public PersonViewAndTakeAppointment(JPanel userPrcoessContainer, Enterprise enterprise, Person persona, EcoSystem ecoSystem) {
        initComponents();

        this.userProcessContainer = userPrcoessContainer;
        this.enterprise = enterprise;
        this.person = persona;
        this.ecoSystem = ecoSystem;
        populateHospitals();
        System.out.println("person ID====>" + person.getEmailID());
        System.out.println("person ID ===>" + person.getPersonID());
        System.out.println(" person lati--->"+person.getLatitude());
        System.out.println("person long----->"+person.getLongitude());
    }

    private void populateHospitals() {
        hospitalComboBox.removeAllItems();

        for (Network network : ecoSystem.getNetworkList().getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterPriseList()) {
                if (enterprise instanceof HospitalEnterprise)
                {
                    hospitalComboBox.addItem(enterprise);
                }
                
            }
        }
    }

    public void populateDoctorList(DoctorDepartment doctorDepartment) {
        DefaultTableModel model = (DefaultTableModel) doctorNameTable.getModel();
        model.setRowCount(0);
        for (Doctor doctor : doctorDepartment.getDoctorDirectory().getDoctorList()) {
            Object row[] = new Object[3];
            row[0] = doctor;
            row[1] = doctor.getDocEducation();
            model.addRow(row);
        }
    }

    public void populateDoctorDepartmentComboBox(Enterprise enterprise) {

        docDepartmentcomBox.removeAllItems();
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof DoctorOrganization) {
                DoctorOrganization doctorOrganization = (DoctorOrganization) organization;
                for (DoctorDepartment doctorDepartment : doctorOrganization.getDoctorDepartmentCatalog().getDoctorDepartmentCatalog()) {
                    docDepartmentcomBox.addItem(doctorDepartment);
                }

            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        docAppoinmentDetails = new javax.swing.JTable();
        hospitalComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        docDepartmentcomBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        doctorNameTable = new javax.swing.JTable();
        selectDateforAppointMent = new org.jdesktop.swingx.JXDatePicker();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        docAppoinmentDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(docAppoinmentDetails);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 530, 540, 88));

        hospitalComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        hospitalComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hospitalComboBoxActionPerformed(evt);
            }
        });
        add(hospitalComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 130, 173, 35));

        jLabel1.setText("Select Hospital:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 130, -1, -1));

        docDepartmentcomBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        docDepartmentcomBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                docDepartmentcomBoxActionPerformed(evt);
            }
        });
        add(docDepartmentcomBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 190, 173, 35));

        jLabel2.setText("Select Department:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 190, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Select Doctor from below Table:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 270, -1, -1));

        jButton1.setText("Confirm Appointment");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 670, 190, 35));

        doctorNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Doctor Name", "Speciality"
            }
        ));
        jScrollPane2.setViewportView(doctorNameTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 300, -1, 90));

        selectDateforAppointMent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDateforAppointMentActionPerformed(evt);
            }
        });
        add(selectDateforAppointMent, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 450, -1, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setText("Appointment Schedule");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 40, -1, -1));

        jButton2.setText("View Hospital locationLocation");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 670, -1, 35));
    }// </editor-fold>//GEN-END:initComponents

    private void hospitalComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hospitalComboBoxActionPerformed
        enterprise = (Enterprise) hospitalComboBox.getSelectedItem();
        if (enterprise != null) {
            populateDoctorDepartmentComboBox(enterprise);
        }
    }//GEN-LAST:event_hospitalComboBoxActionPerformed

    private void docDepartmentcomBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_docDepartmentcomBoxActionPerformed
        DoctorDepartment doctorDepartment = (DoctorDepartment) docDepartmentcomBox.getSelectedItem();
        if (doctorDepartment != null) {
            populateDoctorList(doctorDepartment);
        }
    }//GEN-LAST:event_docDepartmentcomBoxActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Date date = selectDateforAppointMent.getDate();
        Date todayDate = new Date();
        if (date != null) {
            long time = date.getTime();
            long todattime = todayDate.getTime();
            if (time - todattime < 0) {
                JOptionPane.showMessageDialog(null, "Can not take appoinment,please select future date");
            } else {
                int selectedRow = docAppoinmentDetails.getSelectedRow();
                if (selectedRow >= 0) {
                    Appointment appoinment = (Appointment) docAppoinmentDetails.getValueAt(selectedRow, 0);

                    if (!appoinment.getAppointmentStatus().getValue().equals("Open")) {
                        System.out.println("===inside if=====");
                        JOptionPane.showMessageDialog(null, "Appointment Status is not open");
                        return;
                    }
                    System.out.println("===below if condotion =======");
 
                    
                     
                    // search for person user accont
                    UserAccount userAccount = searchUserAccount(person);
                    if (userAccount == null) {
                    //Creat user account and add in organization userAccount dir
                        userAccount = createUserAccount(person);
                        
                        System.out.println("====found null and creating user Accunt==");
                    }

                    //Patient patient=addandCreatePatient(person);
                    appoinment.setPatient(userAccount.getPatient());
                    userAccount.getPatient().getAppointmentDirectory().addAppointment(appoinment);
                    appoinment.setAppointmentStatus(Appointment.AppointmentStatus.Booked);
                    
                    try
                    {
                     
                        System.out.println("============successs==================111=");
                            // code to send email
                            String message = "Hi  " + person.getFirstName()+ ","
                                    + "\n"
                                    + "\n"
                                    + "Please find the appointment confirmation details below"
                                    + "\n"
                                    + "\n"
                                    + "Doctor Name:-" + appoinment.getDoctor()
                                    + "\n"
                                    + "Time Slot:-"+appoinment.getTimeSlot()
                                    + "\n"
                                    + "Date :-"+appoinment.getDate()
                                    + "\n"
                                    + "\n"
                                    + "Please user the below Username and Password"
                                    + "\n"
                                    + "UserName:- " + "sam" + person.getPassword()+"\n"
                                    + "Password:- " + "sam" + person.getUsername()+ "\n"
                                    + "\n"
                                    + "\n"
                                    + "Thanks" +"\n"
                                    + enterprise.getOrgName();

                            String[] to = {"samarthnandekar@gmail.com"};
                            System.out.println("============successs==================222=");
                            boolean mailchecking = HMailSentNotification.sendMail(message, to);
                            if (mailchecking) {
                                System.out.println("success");
                                System.out.println("============successs==================3333=");
                            } else {
                                System.out.println("failed, error in emailID.");
                            }
  
                    }
                    catch(Exception ex)
                    {
                        System.out.println(" exception in mail send");
                    }
                                        
                    
                    JOptionPane.showMessageDialog(null, "Thanks, you appointment Booked Now");
                } else {
                    JOptionPane.showMessageDialog(null, "Please select row first");
                }

            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a date");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    public UserAccount searchUserAccount(Person person) {
        if (enterprise instanceof HospitalEnterprise) {
            HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) enterprise;
            for (UserAccount userAccount : hospitalEnterprise.getUserAccountDirectory().getUserAccountList()) {
                System.out.println("Uer Account name====" + userAccount.getUsername());
                if (!(userAccount.getPatient() == null)) {
                    System.out.println(" Second timeUer @@@@@@Account name====" + userAccount.getPatient().getPersonID());
                    System.out.println("==person.getPersonID()===" + person.getPersonID());
                    if (person.getPersonID() == userAccount.getPatient().getPersonID()) {
                        return userAccount;
                    }

                }

            }

        }
        return null;
    }

    public UserAccount createUserAccount(Person person) {
        UserAccount userAccount = new UserAccount();

        System.out.println("===================inside the user Account creation====");
        Patient patient = new Patient();
        patient.setFirstName(person.getFirstName());
        patient.setLastName(person.getLastName());
        patient.setGender(person.getGender());
        patient.setPhoneNo(person.getPhoneNo());
        patient.setEmailID(person.getEmailID());
        patient.setDob(person.getDob());
        patient.setInsuranceCode(person.getInsuranceCode());
        patient.setInsuranceCoverageLimit(person.getInsuranceCoverageLimit());

        patient.setUsername(person.getUsername());
        patient.setPassword(person.getPassword());
        patient.setPersonID(person.getPersonID());

        userAccount.setPatient(patient);
        userAccount.setPassword("sam" + person.getPassword());
        userAccount.setUsername("sam" + person.getUsername());
        userAccount.setRole(new PatientRole());
        if (enterprise instanceof HospitalEnterprise) {
            HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) enterprise;
            PatientDirectory pd = hospitalEnterprise.getPatientDirectory();
            pd.addpatPatient(patient);
            UserAccountDirectory uad = hospitalEnterprise.getUserAccountDirectory();
            uad.addUserAccount(userAccount);
        }
        return userAccount;

    }


    private void selectDateforAppointMentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDateforAppointMentActionPerformed
        int selectedRow = doctorNameTable.getSelectedRow();

        if (selectedRow >= 0) {
            Doctor doctor = (Doctor) doctorNameTable.getValueAt(selectedRow, 0);

            DefaultTableModel dtm = (DefaultTableModel) docAppoinmentDetails.getModel();

            Date date = selectDateforAppointMent.getDate();
            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/YYYY");
            String appmentDate = sdf.format(date);
            if (!(appmentDate.equals(""))) {
                dtm.setNumRows(0);
                for (Appointment appointment : doctor.getAppointmentList().getAppointmentList()) {
                    if (appointment.getDate().equals(appmentDate)) {
                        Object[] row = new Object[4];
                        row[0] = appointment;
                        row[1] = appointment.getTimeSlot();
                        row[2] = appointment.getAppointmentStatus();
                        row[3] = appointment.getPatient();
                        dtm.addRow(row);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select the Date for appointment");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select row Doctor Name");
        }
    }//GEN-LAST:event_selectDateforAppointMentActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         
        HospitalEnterprise hospitalEnterprise = (HospitalEnterprise) hospitalComboBox.getSelectedItem();
        hospitalEnterprise.getOrgName();
        String hospitalLati=String.valueOf(hospitalEnterprise.getLatitude());
        String hospitalLong=String.valueOf(hospitalEnterprise.getLongitude());
        
        String personLati= String.valueOf(person.getLatitude());
        String personLong=String.valueOf(person.getLongitude());
        
        Browser browser = new Browser();
        BrowserView view = new BrowserView(browser);

        JFrame frame = new JFrame("Location Finder");
        //frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        frame.add(view, BorderLayout.CENTER);
        frame.setSize(900, 500);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        
        String finalURLStr="https://www.google.com/maps/dir/'"+personLati+","+personLong+"'/'"+hospitalLati+","+hospitalLong+"'";
        //String basicURL ="https://www.google.com/maps/dir/'42.3398067,-71.0891717'/'42.3471426,-71.0825182'";
        System.out.println("finalURLStr -->"+finalURLStr);
        browser.loadURL(finalURLStr);
        
        
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable docAppoinmentDetails;
    private javax.swing.JComboBox docDepartmentcomBox;
    private javax.swing.JTable doctorNameTable;
    private javax.swing.JComboBox hospitalComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXDatePicker selectDateforAppointMent;
    // End of variables declaration//GEN-END:variables
}
