/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Doctor;

import Business.Doctor.Appointment;
import Business.Doctor.AppointmentDirectory;
import Business.Doctor.Doctor;
import Business.Doctor.DoctorDepartment;
import Business.EcoSystem;
import Business.EnterPrise.Enterprise;
import Business.Organization.CashierOrganization;
import Business.Organization.DoctorOrganization;
import Business.Organization.NurseOrganization;
import Business.Organization.Organization;
import Business.Organization.PharmacistOrganization;
import Business.Patient.Patient;
import Business.PatientVisit.Allergy;
import Business.PatientVisit.Medication;
import Business.PatientVisit.MedicationList;
import Business.PatientVisit.Visit;
import Business.PatientVisit.Visit.VisitType;
import Business.Rules.Rule;
import Business.Rules.RuleDirectory;
import Business.UserAccount.UserAccount;
import Business.VisitPayment.VisitCharges;
import Business.WorkQueue.CollectVisitChargesWorkRequest;
import Business.WorkQueue.GraphicalReportToNurse;
import Business.WorkQueue.MedicineWorkRequest;
import Business.WorkQueue.VitalTestWorkRequest;
import java.awt.CardLayout;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samarth
 */
public class DoctorViewPatientJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorViewPatientJPanel
     */
    private JPanel userProcessContainer;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem ecoSystem;
    private Doctor doctor;
    private MedicationList medicationList;

    public DoctorViewPatientJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.ecoSystem = ecoSystem;
        searchDoctorProfile();
        populateVisitType();
        medicationList = new MedicationList();
        populateVitalSignCombox();
        populateAppointmentDateComboBox();
        populateGraphicRequestCombo();
    }

    public void populateAppointmentDateComboBox() {
        AppointmentDateJComboBox.removeAllItems();
        List<String> uniqueAppointment = new ArrayList<>();
        AppointmentDirectory appointmentDirectory = doctor.getAppointmentList();
        if (appointmentDirectory.getAppointmentList() != null) {
            System.out.println("----1.2-  inside----------");
            for (Appointment appointment : appointmentDirectory.getAppointmentList()) {
                uniqueAppointment.add(appointment.getDate());
                // AppointmentDateJComboBox.addItem(appointment);
                System.out.println("----1.3 inside-----------");
            }
            LinkedHashSet<String> tempAppointmentList = new LinkedHashSet<String>();
            tempAppointmentList.addAll(uniqueAppointment);
            uniqueAppointment.clear();
            uniqueAppointment.addAll(tempAppointmentList);
            for (int i = 0; i < uniqueAppointment.size(); i++) {
                AppointmentDateJComboBox.addItem(uniqueAppointment.get(i));
                System.out.println("value inside the for loop-->" + uniqueAppointment.get(i));
            }
        }
    }

    public void populateVitalSignCombox() {
        vitalSignComboTxt.removeAllItems();
        vitalSignComboTxt.addItem("yes");
        vitalSignComboTxt.addItem("No");

    }

    public void populateGraphicRequestCombo() {
        graphicRequestCombo.removeAllItems();
        graphicRequestCombo.addItem("yes");
        graphicRequestCombo.addItem("No");
    }

    public void populateVisitType() {
        visitTypeCombox.removeAllItems();
        for (VisitType visitType : Visit.VisitType.values()) {
            visitTypeCombox.addItem(visitType);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        doctorAppointmentTable = new javax.swing.JTable();
        AppointmentDateJComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        medicationNameTxt = new javax.swing.JTextField();
        visitTypeCombox = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        medicationTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        alergyNametxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        vitalSignComboTxt = new javax.swing.JComboBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        docCommentTxt = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        removBtn = new javax.swing.JButton();
        backJButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        noOFDaysSpinner = new javax.swing.JSpinner();
        noOfDose = new javax.swing.JSpinner();
        selectStartDatePicker = new org.jdesktop.swingx.JXDatePicker();
        selectEndDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel12 = new javax.swing.JLabel();
        patientNameTxt = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        patientPhoneNO = new javax.swing.JTextField();
        patientEmailID = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        patientGenderTxt = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        patientDoBTxt = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        patientInsuranceCode = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        patientInsuranceLimit = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        patientMRNTxt = new javax.swing.JTextField();
        allergyDetectedDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel20 = new javax.swing.JLabel();
        patientAgeTxt = new javax.swing.JTextField();
        graphicRequestCombo = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        doctorAppointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Time Slot", "Status", "Patient Name"
            }
        ));
        jScrollPane1.setViewportView(doctorAppointmentTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, -1, 90));

        AppointmentDateJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        AppointmentDateJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AppointmentDateJComboBoxActionPerformed(evt);
            }
        });
        add(AppointmentDateJComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 130, 100, 35));

        jLabel2.setText("Select Date:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, -1, -1));

        jLabel1.setText("Medicine Name:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 330, -1, -1));

        jLabel3.setText("Dose:");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 330, -1, -1));

        jLabel4.setText("End Date:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 370, -1, -1));

        jLabel5.setText("Start Date:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 370, -1, -1));
        add(medicationNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 320, 70, -1));

        visitTypeCombox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        visitTypeCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitTypeComboxActionPerformed(evt);
            }
        });
        add(visitTypeCombox, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 250, 110, 35));

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 850, 100, 35));

        medicationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Medicine Name", "Dose", "Start Date", "End Date", "No of Days", "Total No of medicine"
            }
        ));
        jScrollPane2.setViewportView(medicationTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 480, 580, 90));

        jButton2.setText("Add Medicine");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 430, 140, 35));

        jLabel7.setText("Allergy Name:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 620, -1, -1));
        add(alergyNametxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 610, 90, 30));

        jLabel8.setText("Vital Sign Required");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 690, -1, -1));

        vitalSignComboTxt.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        vitalSignComboTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vitalSignComboTxtActionPerformed(evt);
            }
        });
        add(vitalSignComboTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 680, 100, 35));

        docCommentTxt.setColumns(20);
        docCommentTxt.setRows(5);
        jScrollPane3.setViewportView(docCommentTxt);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 770, 290, 50));

        jLabel9.setText("Doctor Comment:");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 790, -1, -1));

        jLabel10.setText("Visit Type:");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 260, -1, -1));

        removBtn.setText("Remove Medicine");
        removBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removBtnActionPerformed(evt);
            }
        });
        add(removBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 430, 140, 35));

        backJButton2.setText("<< Back");
        backJButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton2ActionPerformed(evt);
            }
        });
        add(backJButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 830, 100, 35));

        jLabel6.setText("Detected Date:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 610, -1, -1));

        jLabel11.setText("No of Days:");
        add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 330, -1, -1));
        add(noOFDaysSpinner, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 330, 50, -1));
        add(noOfDose, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 330, 50, -1));
        add(selectStartDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 370, -1, -1));
        add(selectEndDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 370, -1, -1));

        jLabel12.setText("Patinet Name");
        add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 110, -1, -1));
        add(patientNameTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 110, 80, -1));

        jLabel13.setText("Patient Phone No");
        add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 160, -1, -1));

        jLabel14.setText("Patient Email ID");
        add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 200, -1, -1));
        add(patientPhoneNO, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 160, 80, -1));
        add(patientEmailID, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 200, 80, -1));

        jButton3.setText("View");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 360, 100, 35));

        jLabel15.setText("Patient Gender:");
        add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 110, -1, -1));
        add(patientGenderTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 110, 80, -1));

        jLabel16.setText("Patient Date Of Birth:");
        add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 160, -1, -1));
        add(patientDoBTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 160, 80, -1));

        jLabel17.setText("Insurance Code:");
        add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 200, -1, -1));
        add(patientInsuranceCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 200, 80, -1));

        jLabel18.setText("Insurance Limit");
        add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 120, -1, -1));
        add(patientInsuranceLimit, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 120, 60, -1));

        jLabel19.setText("Patient MRN:");
        add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(1140, 160, -1, -1));
        add(patientMRNTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 160, 60, -1));
        add(allergyDetectedDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 610, -1, 30));

        jLabel20.setText("Patient Age:");
        add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(1150, 200, -1, -1));
        add(patientAgeTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 200, 60, -1));

        graphicRequestCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        graphicRequestCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                graphicRequestComboActionPerformed(evt);
            }
        });
        add(graphicRequestCombo, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 680, 120, 35));

        jLabel21.setText("Digital Report:");
        add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 690, -1, -1));

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel22.setText("Patient Visit");
        add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 30, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void AppointmentDateJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AppointmentDateJComboBoxActionPerformed

        String strdate = (String) AppointmentDateJComboBox.getSelectedItem();
        if (strdate != null) {
            populateAppintmentTable(strdate);
        }
    }//GEN-LAST:event_AppointmentDateJComboBoxActionPerformed

    public boolean checkforValidInput(int noOfDose1, int noOfDays, String secondMeString, Date date, Date date1) {
        String validationerror = "Please correct the following error:";

        // validation for medicine Name
        if ((secondMeString.trim()).equals("")) {
            validationerror = validationerror + "\n" + "Please enter the MEdicine name";
        }
        if (!(secondMeString.trim()).equals("") && !(secondMeString.trim()).equals("null")
                && !((secondMeString.trim()).matches("[a-zA-Z]*"))) {
            validationerror = validationerror + "\n" + "Medicine name should "
                    + "contain characters only";
        }
        if ((!(secondMeString.trim()).equals("")) && (!(secondMeString.trim().length() < 15))) {
            validationerror = validationerror + "\n" + "Medicine name lenght should be less than 15";
        }

        //validation for no of dose
        if (!(noOfDose1 < 10 && noOfDose1 > 1)) {
            validationerror = validationerror + "\n" + "No of Dose can not be more than 10 and less than one";
        }

        if (!(noOfDays < 60 && noOfDays > 1)) {
            validationerror = validationerror + "\n" + "No of Days can not be more than 60 and less than one";
        }

        if (date == null) {
            validationerror = validationerror + "\n" + "Please select the start Date";
        }
        System.out.println("ate.before(new Date()-->" + date.before(new Date()));

        if (date != null) {
            if (date.before(new Date())) {
                validationerror = validationerror + "\n" + "Please select correct Start Date";
            }
        }

        if (date1 == null) {
            validationerror = validationerror + "\n" + "Please select the end Date";
        }
        System.out.println("date1.after(date)-->" + date1.after(date));

        if (date1 != null) {
            if (!date1.after(date)) {
                validationerror = validationerror + "\n" + "Please select the correct end Date";
            }

        }

        if (validationerror.equals("Please correct the following error:")) {
            validationerror = "Thanks for details";
            //JOptionPane.showMessageDialog(null, validationerror);
            return true;
        } else {
            JOptionPane.showMessageDialog(null, validationerror);
            return false;
        }

    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        System.out.println("==== inside function 1.1 --====");
        int noOfDose1 = (Integer) noOfDose.getValue();
        int noOfDays = (Integer) noOFDaysSpinner.getValue();
        String secondMeString = medicationNameTxt.getText();
        Date date1 = selectEndDatePicker.getDate();
        Date date = selectStartDatePicker.getDate();

        boolean isvalidInput = checkforValidInput(noOfDose1, noOfDays, secondMeString, date, date1);

        if (isvalidInput) {
            Medication medication = new Medication();
            medication.setDoctor(doctor);
            medication.setDose(String.valueOf(noOfDose1));

            SimpleDateFormat sdf1 = new SimpleDateFormat("MM/dd/YYYY");
            String lastDate = sdf1.format(date1);

            medication.setEndDate(lastDate);

            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/YYYY");
            String strDate = sdf.format(date);

            medication.setStartDate(strDate);
            medication.setMedicationName(secondMeString);
            medication.setForNoOfDays(noOfDays);
            medication.setTotalNumberOfMedicine(noOfDays * noOfDose1);

            // get Rule handle
            String flag = "No";
            DoctorOrganization doctorOrganization = (DoctorOrganization) organization;
            RuleDirectory ruleDirectory = doctorOrganization.getRuleDirectory();
            List<Rule> ruleList = ruleDirectory.getRuleList();
            System.out.println("size of medication list" + medicationList.getMedicationList().size());
            if (medicationList.getMedicationList().size() == 0) {
                System.out.println("====in side the null if condition===");
                medicationList.addMedication(medication);
            } else {

                System.out.println("===in else condition =====");
                for (Medication medication1 : medicationList.getMedicationList()) {
                    System.out.println("----1.2.....");
                    System.out.println("----1.2 is rule value--" + ruleList.isEmpty());
                    for (Rule rule : ruleList) {
                        System.out.println("----1.3.....");
                        HashMap<String, ArrayList<String>> currRuleList = rule.getDetailRule();
                        for (Map.Entry<String, ArrayList<String>> entry : currRuleList.entrySet()) {
                            System.out.println("medication Name-->" + medication.getMedicationName());
                            System.out.println("entry.getKey()--->" + entry.getKey());
                            if (medication1.getMedicationName().equals(entry.getKey())) {
                                ArrayList<String> medicineList = entry.getValue();
                                System.out.println("==================================================");
                                System.out.println("medicineList.contains(secondMeString);-->" + medicineList.contains(secondMeString));
                                if (medicineList.contains(secondMeString)) {
                                    System.out.println("----1.5.....");
                                    JOptionPane.showMessageDialog(null, " medecine can not be given with previous medicine");
                                    flag = "No";
                                    break;
                                } else {
                                    System.out.println("====set flag as yes=======");
                                    flag = "yes";
                                }
                                //}
                            }
                        }
                    }
                }
            }
            if (flag.equals("yes")) {
                System.out.println("----1.6.....");
                medicationList.addMedication(medication);
                flag = "No";
            }

            populatemedicationTable(medicationList);
            medicationNameTxt.setText("");

        }
    }//GEN-LAST:event_jButton2ActionPerformed
// end of funcion here

    public void populatemedicationTable(MedicationList currMedicationList) {
        DefaultTableModel model = (DefaultTableModel) medicationTable.getModel();
        model.setRowCount(0);

        System.out.println("==== inside function  1.2--====");
        for (Medication medication : currMedicationList.getMedicationList()) {
            Object[] row = new Object[7];
            row[0] = medication;
            row[1] = medication.getEndDate();
            row[2] = medication.getStartDate();
            row[3] = medication.getDose();
            row[4] = medication.getForNoOfDays();
            row[5] = medication.getTotalNumberOfMedicine();
            model.addRow(row);
        }

    }

    private void removBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removBtnActionPerformed
        // TODO add your handling code here:
        Medication medication = (Medication) selectedItemInTable(medicationTable);
        medicationList.removeMedication(medication);
        populatemedicationTable(medicationList);
    }//GEN-LAST:event_removBtnActionPerformed

    private void backJButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton2ActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton2ActionPerformed

    public boolean checkUserInputValid(String allergyName) {

        String validationerror = "Please correct the following error:";

        // validation for Allergy Name
        if (!(allergyName.trim()).equals("") && !(allergyName.trim()).equals("null")
                && !((allergyName.trim()).matches("[a-zA-Z]*"))) {
            validationerror = validationerror + "\n" + "Allergy name should "
                    + "contain characters only";
        }
        if ((!(allergyName.trim()).equals("")) && (!(allergyName.trim().length() < 10))) {
            validationerror = validationerror + "\n" + "Allergy name lenght should be less than 10";
        }

        if (validationerror.equals("Please correct the following error:")) {
            validationerror = "Thanks for details";
            //JOptionPane.showMessageDialog(null, validationerror);
            return true;
        } else {
            JOptionPane.showMessageDialog(null, validationerror);
            return false;
        }

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int selectedRow = doctorAppointmentTable.getSelectedRow();

        if (selectedRow >= 0) {
            Appointment appointment = (Appointment) doctorAppointmentTable.getValueAt(selectedRow, 0);

            String allergyName = alergyNametxt.getText();
            Date date = allergyDetectedDate.getDate();
            boolean isUserInputValid = true;
            if (appointment.getAppointmentStatus().getValue().equals("Submitted")) {
                JOptionPane.showMessageDialog(null, "Appointment status is already Submitted, can not processed on it");
                isUserInputValid = false;
            }

            if ((allergyName.equals("") && (date != null))) {
                isUserInputValid = false;
                JOptionPane.showMessageDialog(null, "you have selected detected allergy date but allergy name is blank");
            } else if ((date == null) && (!allergyName.equals(""))) {
                isUserInputValid = false;
                JOptionPane.showMessageDialog(null, "Please select allergy date");
            } else if (allergyName != null && date != null) {
                isUserInputValid = checkUserInputValid(allergyName);
            }

            if (isUserInputValid) {
                String allergyDetectedDate = "";
                if (allergyName != null && date != null) {
                    SimpleDateFormat sdf1 = new SimpleDateFormat("MM/dd/YYYY");
                    allergyDetectedDate = sdf1.format(date);
                }
                if (medicationList.getMedicationList().size() >= 1) {

                    appointment.setAppointmentStatus(Appointment.AppointmentStatus.Submitted);
                    Patient patient = appointment.getPatient();
                    Visit visit = new Visit();
                    visit.getPrescription().setMedicationList(medicationList);

                    //allergy add code
                    if (allergyName != null && date != null) {
                        Allergy allergy = new Allergy();
                        allergy.setAllergyName(allergyName);
                        allergy.setEffectiveDate(allergyDetectedDate);
                        visit.getAllergyList().addAllergy(allergy);
                        patient.getAllergyList().addAllergy(allergy);
                    }
                    String docComment = docCommentTxt.getText();
                    visit.setComment(docComment);

                    VisitType visitType = (VisitType) visitTypeCombox.getSelectedItem();
                    visit.setVisitType(visitType);

                    visit.setDoctor(doctor);

                    visit.setPatient(patient);
                    Date todayDate = new Date();
                    SimpleDateFormat sdf = new SimpleDateFormat();
                    String strtodayDate = sdf.format(todayDate);
                    visit.setAppointmentDate(strtodayDate);
                    visit.getPrescription().setDate(strtodayDate);
                    visit.getPrescription().setDoctor(doctor);
                    visit.getVisitCharges().setBillGenerateDate(strtodayDate);
                    visit.getVisitCharges().setPaymentStatus(VisitCharges.PaymentStatus.BillGenerated);
                    String isVitalRequired = (String) vitalSignComboTxt.getSelectedItem();
                    if (isVitalRequired.equalsIgnoreCase("yes")) {
                        generateVitalRequest(todayDate, visit);

                    }
                    // generate request for medicine
                    generatePatientMedicineRequest(todayDate, visit);

                    // generate request for Payment
                    generateVisitPaymentRequest(todayDate, visit);

                    String isDigitalReportReq = (String) graphicRequestCombo.getSelectedItem();
                    if (isDigitalReportReq.equalsIgnoreCase("yes")) {
                        generateDigitalReportRequest(visit);
                    }

                    patient.getVisitDirectory().addVisit(visit);
                    doctor.getVisitList().addVisit(visit);
                    clearText();
                    JOptionPane.showMessageDialog(null, "Thanks");
                } else {
                    JOptionPane.showMessageDialog(null, "Please provide the medicine lists");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select Appointment first");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void clearText() {
        alergyNametxt.setText("");
        allergyDetectedDate.removeAll();
        //medicationList.getMedicationList().clear();

        patientAgeTxt.setText("");
        patientDoBTxt.setText("");
        patientEmailID.setText("");
        patientGenderTxt.setText("");
        patientInsuranceCode.setText("");
        patientInsuranceLimit.setText("");
        patientMRNTxt.setText("");
        patientNameTxt.setText("");
        patientPhoneNO.setText("");
    }

    public void generateDigitalReportRequest(Visit currVisit) {
        GraphicalReportToNurse graphicalReportToNurse = new GraphicalReportToNurse();
        graphicalReportToNurse.setSender(doctor);
        Date dateTodays = new Date();
        graphicalReportToNurse.setRequestDate(dateTodays);
        graphicalReportToNurse.setVisit(currVisit);
        graphicalReportToNurse.setStatus("Sent");
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof NurseOrganization) {
                org = organization;
                System.out.println("--- in side the ggraphical Report ------------ ");
                break;

            }
        }
        if (org != null) {
            System.out.println("--- in side the graphical Report ------------ ");
            org.getWorkQueue().getWorkRequestList().add(graphicalReportToNurse);
            userAccount.getWorkQueue().getWorkRequestList().add(graphicalReportToNurse);
        }
    }

    // function to generate the visit payment request

    public void generateVisitPaymentRequest(Date todayDate, Visit visit) {
        CollectVisitChargesWorkRequest cVCWR = new CollectVisitChargesWorkRequest();
        cVCWR.setSender(doctor);
        cVCWR.setRequestDate(todayDate);
        cVCWR.setStatus("send");
        cVCWR.setVisit(visit);
        Organization org = null;

        System.out.println("--- in side the generateVisitPaymentRequest ------------ ");
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof CashierOrganization) {
                org = organization;
                System.out.println("--- in side the generateVisitPaymentRequest222222 ------------ ");
                break;

            }
        }
        if (org != null) {
            System.out.println("--- in side the generateVisitPaymentRequest3333 ------------ ");
            org.getWorkQueue().getWorkRequestList().add(cVCWR);
            userAccount.getWorkQueue().getWorkRequestList().add(cVCWR);
        }

    }

    public void generateVitalRequest(Date todayDate, Visit visit) {
        VitalTestWorkRequest vitalTestWorkRequest = new VitalTestWorkRequest();
        vitalTestWorkRequest.setSender(doctor);
        vitalTestWorkRequest.setRequestDate(todayDate);
        vitalTestWorkRequest.setStatus("Sent");
        vitalTestWorkRequest.setVisit(visit);
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof NurseOrganization) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(vitalTestWorkRequest);
            userAccount.getWorkQueue().getWorkRequestList().add(vitalTestWorkRequest);
        }
    }

    public void generatePatientMedicineRequest(Date todayDate, Visit visit) {
        MedicineWorkRequest medicineWorkRequest = new MedicineWorkRequest();
        medicineWorkRequest.setSender(doctor);
        medicineWorkRequest.setRequestDate(todayDate);
        medicineWorkRequest.setStatus("Sent");
        medicineWorkRequest.getPrescription().setMedicationList(medicationList);
        medicineWorkRequest.setVisit(visit);
        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof PharmacistOrganization) {
                org = organization;
                break;
            }
        }
        if (org != null) {
            org.getWorkQueue().getWorkRequestList().add(medicineWorkRequest);
            userAccount.getWorkQueue().getWorkRequestList().add(medicineWorkRequest);
        }
    }
    private void visitTypeComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitTypeComboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_visitTypeComboxActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

        int selectedRow = doctorAppointmentTable.getSelectedRow();
        if (selectedRow >= 0) {
            Appointment appointment = (Appointment) doctorAppointmentTable.getValueAt(selectedRow, 0);
            Patient patient = appointment.getPatient();
            patientNameTxt.setText(patient.getFirstName() + " " + patient.getLastName());
            patientPhoneNO.setText(patient.getPhoneNo());
            System.out.println("phone no-->" + patient.getPhoneNo());
            patientEmailID.setText(patient.getEmailID());
            patientGenderTxt.setText(patient.getGender());
            System.out.println("---gender-->" + patient.getGender());
            patientDoBTxt.setText(patient.getDob());
            patientInsuranceCode.setText(patient.getInsuranceCode());
            patientInsuranceLimit.setText(String.valueOf(patient.getInsuranceCoverageLimit()));
            patientMRNTxt.setText(patient.getMrn());
            try {
                String dobString = patient.getDob();
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy");

                Date birthDateChange = simpleDateFormat.parse(dobString);
                System.out.println("birthDateChange--->" + birthDateChange);
                Calendar birthDay = Calendar.getInstance();
                birthDay.setTimeInMillis(birthDateChange.getTime());

                long currentTime = System.currentTimeMillis();
                Calendar now = Calendar.getInstance();
                now.setTimeInMillis(currentTime);
                int years = now.get(Calendar.YEAR) - birthDay.get(Calendar.YEAR);

                patientAgeTxt.setText(String.valueOf(years));
            } catch (ParseException exp) {
                patientAgeTxt.setText("in catch section");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select one row");

        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void vitalSignComboTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vitalSignComboTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vitalSignComboTxtActionPerformed

    private void graphicRequestComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_graphicRequestComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_graphicRequestComboActionPerformed

    private Object selectedItemInTable(JTable table) {
        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            Object object = table.getValueAt(selectedRow, 0);
            return object;
        } else {
            JOptionPane.showMessageDialog(null, "Please select one row");
            return null;
        }
    }

    private void populateAppintmentTable(String strdate) {
        DefaultTableModel model = (DefaultTableModel) doctorAppointmentTable.getModel();
        model.setRowCount(0);
        for (Appointment appointment : doctor.getAppointmentList().getAppointmentList()) {
            if ((appointment.getDate()).equals(strdate)) {
                Object[] row = new Object[5];
                row[0] = appointment;
                row[1] = appointment.getTimeSlot();
                row[2] = appointment.getAppointmentStatus();
                row[3] = appointment.getPatient();
                model.addRow(row);
            }
        }
    }

    public void searchDoctorProfile() {
        int emp = userAccount.getEmployee().getEmpID();
        if (organization instanceof DoctorOrganization) {
            DoctorOrganization doctorOrganization = (DoctorOrganization) organization;
            for (DoctorDepartment doctorDepartment : doctorOrganization.getDoctorDepartmentCatalog().getDoctorDepartmentCatalog()) {
                for (Doctor doctor : doctorDepartment.getDoctorDirectory().getDoctorList()) {
                    if (doctor.getEmpID() == userAccount.getEmployee().getEmpID()) {
                        this.doctor = doctor;
                    }
                }
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AppointmentDateJComboBox;
    private javax.swing.JTextField alergyNametxt;
    private org.jdesktop.swingx.JXDatePicker allergyDetectedDate;
    private javax.swing.JButton backJButton2;
    private javax.swing.JTextArea docCommentTxt;
    private javax.swing.JTable doctorAppointmentTable;
    private javax.swing.JComboBox graphicRequestCombo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField medicationNameTxt;
    private javax.swing.JTable medicationTable;
    private javax.swing.JSpinner noOFDaysSpinner;
    private javax.swing.JSpinner noOfDose;
    private javax.swing.JTextField patientAgeTxt;
    private javax.swing.JTextField patientDoBTxt;
    private javax.swing.JTextField patientEmailID;
    private javax.swing.JTextField patientGenderTxt;
    private javax.swing.JTextField patientInsuranceCode;
    private javax.swing.JTextField patientInsuranceLimit;
    private javax.swing.JTextField patientMRNTxt;
    private javax.swing.JTextField patientNameTxt;
    private javax.swing.JTextField patientPhoneNO;
    private javax.swing.JButton removBtn;
    private org.jdesktop.swingx.JXDatePicker selectEndDatePicker;
    private org.jdesktop.swingx.JXDatePicker selectStartDatePicker;
    private javax.swing.JComboBox visitTypeCombox;
    private javax.swing.JComboBox vitalSignComboTxt;
    // End of variables declaration//GEN-END:variables
}
