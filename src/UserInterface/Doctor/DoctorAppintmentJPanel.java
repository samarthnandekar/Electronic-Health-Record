/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Doctor;

import Business.Doctor.Appointment;
import Business.Doctor.AppointmentDirectory;
import Business.Doctor.Doctor;
import Business.Doctor.DoctorDepartment;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.EnterPrise.Enterprise;
import Business.Organization.DoctorOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Samarth
 */
public class DoctorAppintmentJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Organization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem ecoSystem;
    private Doctor doctor;

    public DoctorAppintmentJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem ecoSystem) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.ecoSystem = ecoSystem;

        System.out.println("user account Name" + userAccount.getUsername());
        searchDoctorProfile();
        populateAppointmentStatus();
        populateTimeSlotData();
    }

    public void populateTimeSlotData() {
        appointmentTimeSlotCombox.removeAllItems();
        appointmentTimeSlotCombox.addItem("6:00 pm -6:30 pm");
        appointmentTimeSlotCombox.addItem("6:30 pm -7:00 pm");
        appointmentTimeSlotCombox.addItem("7:00 pm -7:30 pm");
        appointmentTimeSlotCombox.addItem("7:30 pm -8:00 pm");
    }

    public void populateAppointmentStatus() {
        appointmentStatusCombox.removeAllItems();
        appointmentStatusCombox.addItem(Appointment.AppointmentStatus.Open.getValue());
       // appointmentStatusCombox.addItem(Appointment.AppointmentStatus.Booked.getValue());
        appointmentStatusCombox.addItem(Appointment.AppointmentStatus.Canceled.getValue());

    }

    public void populateAppointmentDateComboBox() {
        System.out.println("----- inside populateAppointmentDateComboBox-----");
        // AppointmentDateJComboBox.removeAllItems();
        List<String> uniqueAppointment = new ArrayList<>();
        AppointmentDirectory appointmentDirectory = doctor.getAppointmentList();
        if (appointmentDirectory.getAppointmentList() != null) {
            System.out.println("----1.2-  inside----------");
            for (Appointment appointment : appointmentDirectory.getAppointmentList()) {
                uniqueAppointment.add(appointment.getDate());
                // AppointmentDateJComboBox.addItem(appointment);
                System.out.println("----1.3 inside-----------");
            }
            LinkedHashSet<String> tempAppointmentList = new LinkedHashSet<String>();
            tempAppointmentList.addAll(uniqueAppointment);
            uniqueAppointment.clear();
            uniqueAppointment.addAll(tempAppointmentList);
            for (int i = 0; i < uniqueAppointment.size(); i++) {
                //  AppointmentDateJComboBox.addItem(uniqueAppointment.get(i));
                System.out.println("value inside the for loop-->" + uniqueAppointment.get(i));
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        doctorAppointmentTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        backJButton = new javax.swing.JButton();
        selectDatePicker = new org.jdesktop.swingx.JXDatePicker();
        selectDateforViewAppointment = new org.jdesktop.swingx.JXDatePicker();
        appointmentStatusCombox = new javax.swing.JComboBox();
        appointmentTimeSlotCombox = new javax.swing.JComboBox();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("AppointMent Details");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, 210, 30));
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 130, -1, -1));

        jLabel5.setText("Time Slot:");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 180, 100, 35));

        jLabel6.setText("AppointMent Status:");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 250, 160, 35));

        jLabel7.setText("Date:");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 120, 100, 35));

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 370, 100, 35));

        doctorAppointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Time Slot", "Status", "Patient Name"
            }
        ));
        jScrollPane1.setViewportView(doctorAppointmentTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 580, 630, 130));

        jLabel2.setText("Select Date:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 510, -1, -1));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });
        add(backJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 740, 100, 35));

        selectDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDatePickerActionPerformed(evt);
            }
        });
        add(selectDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 110, 170, 35));

        selectDateforViewAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDateforViewAppointmentActionPerformed(evt);
            }
        });
        add(selectDateforViewAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 510, -1, 35));

        appointmentStatusCombox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(appointmentStatusCombox, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 250, 170, 35));

        appointmentTimeSlotCombox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        appointmentTimeSlotCombox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentTimeSlotComboxActionPerformed(evt);
            }
        });
        add(appointmentTimeSlotCombox, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 180, 170, 35));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Date date = selectDatePicker.getDate();

        if (date != null) {

            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/YYYY");
            String strDate = sdf.format(date);

            Date toDaydate = new Date();
            long time = date.getTime();
            long todattime = toDaydate.getTime();
            if (time - todattime < 0) {
                JOptionPane.showMessageDialog(null, "Please post the appoinment for future date");
            } else {

                String strTimeSlot = (String) appointmentTimeSlotCombox.getSelectedItem();
                boolean isValidAppTime = checkValidAppointmentTime(strDate, strTimeSlot);

                if (isValidAppTime) {
                    String strAppStatus = (String) appointmentStatusCombox.getSelectedItem();
                    Appointment appointment = new Appointment();
                    appointment.setDate(strDate);
                    appointment.setTimeSlot(strTimeSlot);
                    System.out.println("strAppStatus--->"+strAppStatus);
                    if (strAppStatus.equalsIgnoreCase("Open")) {
                        appointment.setAppointmentStatus(Appointment.AppointmentStatus.Open);
                    } else if (strAppStatus.equalsIgnoreCase("Booked")) {
                        appointment.setAppointmentStatus(Appointment.AppointmentStatus.Booked);
                        
                    } else if (strAppStatus.equalsIgnoreCase("Canceled")) {
                        appointment.setAppointmentStatus(Appointment.AppointmentStatus.Canceled);
                    }
                    appointment.setDoctor(doctor);
                    doctor.getAppointmentList().addAppointment(appointment);
                    //populateAppointmentDateComboBox();
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "please select Date");
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    public boolean checkValidAppointmentTime(String strDate, String strTimeSlot) {
        for (Appointment appointment : doctor.getAppointmentList().getAppointmentList()) {
            if ((appointment.getDate().equals(strDate)) && (appointment.getTimeSlot().equals(strTimeSlot))) {
                JOptionPane.showMessageDialog(null, "Appointment already present for same time and Date");
                return false;
            }

        }
        return true;
    }
    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void selectDateforViewAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDateforViewAppointmentActionPerformed
        // TODO add your handling code here:

        Date date = selectDateforViewAppointment.getDate();
        SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/YYYY");
        String strDate = sdf.format(date);

        if (strDate != null) {
            populateAppintmentTable(strDate);
        }
    }//GEN-LAST:event_selectDateforViewAppointmentActionPerformed

    private void selectDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDatePickerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_selectDatePickerActionPerformed

    private void appointmentTimeSlotComboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentTimeSlotComboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appointmentTimeSlotComboxActionPerformed

    private void populateAppintmentTable(String strdate) {

        DefaultTableModel model = (DefaultTableModel) doctorAppointmentTable.getModel();
        model.setRowCount(0);
        for (Appointment appointment : doctor.getAppointmentList().getAppointmentList()) {
            if ((appointment.getDate()).equals(strdate)) {
                Object[] row = new Object[5];
                row[0] = appointment.getDate();
                row[1] = appointment.getTimeSlot();
                row[2] = appointment.getAppointmentStatus();
                row[3] = appointment.getPatient();
                model.addRow(row);
            }
        }
    }

    public void searchDoctorProfile() {
        int emp = userAccount.getEmployee().getEmpID();
        if (organization instanceof DoctorOrganization) {
            DoctorOrganization doctorOrganization = (DoctorOrganization) organization;
            for (DoctorDepartment doctorDepartment : doctorOrganization.getDoctorDepartmentCatalog().getDoctorDepartmentCatalog()) {
                for (Doctor doctor : doctorDepartment.getDoctorDirectory().getDoctorList()) {
                    if (doctor.getEmpID() == userAccount.getEmployee().getEmpID()) {
                        this.doctor = doctor;
                    }
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox appointmentStatusCombox;
    private javax.swing.JComboBox appointmentTimeSlotCombox;
    private javax.swing.JButton backJButton;
    private javax.swing.JTable doctorAppointmentTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXDatePicker selectDatePicker;
    private org.jdesktop.swingx.JXDatePicker selectDateforViewAppointment;
    // End of variables declaration//GEN-END:variables
}
